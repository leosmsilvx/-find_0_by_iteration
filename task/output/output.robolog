V 0.0.4
T 2024-10-11T16:53:29.241+00:00
ID 1|573f3718-87f1-11ef-9400-d03957b9491c
I "sys.platform=win32"
I "python=3.12.2 (tags/v3.12.2:6abddd9, Feb  6 2024, 21:26:36) [MSC v.1937 64 bit (AMD64)]"
M a:"solveEquation.py - inputs"
SR a|0.007
M c:"Collect tasks"
M d:"setup"
M e:""
P b:c|d|e|e|0
ST b|0.008
M f:"regular"
M g:"\nCollecting task inputs from: c:\\Users\\THIAGO PEREIRA\\OneDrive\\Documentos\\\u00c1rea de Trabalho\\Faculdade\\M\u00e9todos Num\u00e9ricos - 4P\\Exerc\u00edcios\\-find_0_by_iteration\\task\\solveEquation.py\n"
C f|g|0.009
M i:"UserSettings.get"
M j:"PySimpleGUI.PySimpleGUI"
M k:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\PySimpleGUI\\PySimpleGUI.py"
P h:i|j|k|e|22488
M l:"METHOD"
SE h|l|0.19
M m:"key"
M n:"str"
M o:"'-LICENSE KEY-'"
EA m|n|o
M p:"default"
M q:"NoneType"
M r:"None"
EA p|q|r
P s:i|j|k|e|22517
M t:"''"
R s|n|t|0.19
M u:"PASS"
EE l|u|0.19
SE h|l|0.194
EA m|n|o
EA p|q|r
R s|n|t|0.194
EE l|u|0.194
M w:"AbstractKey.__init__"
M x:"rsa.key"
M y:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\rsa\\key.py"
P v:w|x|y|e|56
SE v|l|0.194
M z:"n"
M A:"int"
M B:"649047446469755436164476493962254035073041614213816057338401998730370524922197937055263090312344717117843867068444841900309917092708610667902001320856938599790737762627391462194393397784994647840610069518444594490119823733471782956388202830455031724948796017238478334782251502987089602314751456321021638681886494062733979343442244283506795031435368700630571960159134090509051717849375204626853548349543941888517672667711224748175889866971968361250300511484833488480627120354092771454569152381211961865351290733664462517612125599310372315363529166209979694176272966269321267348534464910237190092323368963528974789269962324676986412938643549355203931254588888042103516289241869343542982359782871421341829338774133739828247619517656059238537559109756138558695696881092478901066624822869004861241283204035831991034668384723796384732957468696163484734104404994716764532477133452104342097472855346857870636831112496827868306381480322502714949595878631536159102771855600219237123388023160278526038681028800819475964000442602488617987970360654851394191760850702793985831503371356750578878603503986441267426900693166646664789792869135928743576976775614172484303781747874178540659521511014069392516692873175542205468521421392130208300400952409"
EA z|A|B
M C:"e"
M D:"65537"
EA C|A|D
EE l|u|0.194
M F:"verify"
M G:"rsa.pkcs1"
M H:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\rsa\\pkcs1.py"
P E:F|G|H|e|342
SE E|l|0.212
M I:"message"
M J:"bytes"
M K:"b'#!/usr/bin/python3\\n\\n#       ___                     ___                       ___           ___                       ___           ___           ___\\n#      /\\\\  \\\\                   /\\\\__\\\\                     /\\\\  \\\\         /\\\\  \\\\                     /\\\\__\\\\         /\\\\__\\\\         /\\\\  \\\\\\n#     /::\\\\  \\\\       ___       /:/ _/_       ___         |::\\\\  \\\\       /::\\\\  \\\\                   /:/ _/_       /:/ _/_        \\\\:\\\\  \\\\       ___\\n#    /:/\\\\:\\\\__\\\\     /|  |     /:/ /\\\\  \\\\     /\\\\__\\\\        |:|:\\\\  \\\\     /:/\\\\:\\\\__\\\\                 /:/ /\\\\__\\\\     /:/ /\\\\  \\\\        \\\\:\\\\  \\\\     /\\\\__\\\\\\n#   /:/ /:/  /    |:|  |    /:/ /::\\\\  \\\\   /:/__/      __|:|\\\\:\\\\  \\\\   /:/ /:/  /  ___     ___   /:/ /:/ _/_   /:/ /::\\\\  \\\\   ___  \\\\:\\\\  \\\\   /:/__/\\n#  /:/_/:/  /     |:|  |   /:/_/:/\\\\:\\\\__\\\\ /::\\\\  \\\\     /::::|_\\\\:\\\\__\\\\ /:/_/:/  /  /\\\\  \\\\   /\\\\__\\\\ /:/_/:/ /\\\\__\\\\ /:/__\\\\/\\\\:\\\\__\\\\ /\\\\  \\\\  \\\\:\\\\__\\\\ /::\\\\  \\\\\\n#  \\\\:\\\\/:/  /    __|:|__|   \\\\:\\\\/:/ /:/  / \\\\/\\\\:\\\\  \\\\__  \\\\:\\\\~~\\\\  \\\\/__/ \\\\:\\\\/:/  /   \\\\:\\\\  \\\\ /:/  / \\\\:\\\\/:/ /:/  / \\\\:\\\\  \\\\ /:/  / \\\\:\\\\  \\\\ /:/  / \\\\/\\\\:\\\\  \\\\__\\n#   \\\\::/__/    /::::\\\\  \\\\    \\\\::/ /:/  /   ~~\\\\:\\\\/\\\\__\\\\  \\\\:\\\\  \\\\        \\\\::/__/     \\\\:\\\\  /:/  /   \\\\::/_/:/  /   \\\\:\\\\  /:/  /   \\\\:\\\\  /:/  /   ~~\\\\:\\\\/\\\\__\\\\\\n#    \\\\:\\\\  \\\\    ~~~~\\\\:\\\\  \\\\    \\\\/_/:/  /       \\\\::/  /   \\\\:\\\\  \\\\        \\\\:\\\\  \\\\      \\\\:\\\\/:/  /     \\\\:\\\\/:/  /     \\\\:\\\\/:/  /     \\\\:\\\\/:/  /       \\\\::/  /\\n#     \\\\:\\\\__\\\\        \\\\:\\\\__\\\\     /:/  /        /:/  /     \\\\:\\\\__\\\\        \\\\:\\\\__\\\\      \\\\::/  /       \\\\::/  /       \\\\::/  /       \\\\::/  /        /:/  /\\n#      \\\\/__/         \\\\/__/     \\\\/__/         \\\\/__/       \\\\/__/         \\\\/__/       \\\\/__/         \\\\/__/         \\\\/__/         \\\\/__/         \\\\/__/\\n#\\n#\\n#                                               ___                                     ___\\n#                                              /\\\\__\\\\                      ___          /\\\\__\\\\\\n#                                             /:/ _/_       ___          /\\\\  \\\\        /:/ _/_\\n#                                            /:/ /\\\\__\\\\     /\\\\__\\\\         \\\\:\\\\  \\\\      /:/ /\\\\__\\\\\\n#                                           /:/ /:/  /    /:/__/          \\\\:\\\\  \\\\    /:/ /:/ _/_\\n#                                          /:/_/:/  /    /::\\\\  \\\\      ___  \\\\:\\\\__\\\\  /:/_/:/ /\\\\__\\\\\\n#                                          \\\\:\\\\/:/  /     \\\\/\\\\:\\\\  \\\\__  /\\\\  \\\\ |:|  |  \\\\:\\\\/:/ /:/  /\\n#                                           \\\\::/__/       ~~\\\\:\\\\/\\\\__\\\\ \\\\:\\\\  \\\\|:|  |   \\\\::/_/:/  /\\n#                                            \\\\:\\\\  \\\\          \\\\::/  /  \\\\:\\\\__|:|__|    \\\\:\\\\/:/  /\\n#                                             \\\\:\\\\__\\\\         /:/  /    \\\\::::/__/      \\\\::/  /\\n#                                              \\\\/__/         \\\\/__/      ~~~~           \\\\/__/\\n#\\n#\\n#     Copyright 2023, 2024 PySimpleSoft Inc.\\n\\nversion = \"5.0.6 Released 28-Jun-2024\"\\n\\n# M\"\"\"\"\"\"\"`YM MM\"\"\"\"\"\"\"\"`M M\"\"MMMMM\"\"M MM\"\"\"\"\"\"\"\"`M MM\"\"\"\"\"\"\"`MM\\n# M  mmmm.  M MM  mmmmmmmM M  MMMMM  M MM  mmmmmmmM MM  mmmm,  M\\n# M  MMMMM  M M`      MMMM M  MMMMP  M M`      MMMM M\\'        .M\\n# M  MMMMM  M MM  MMMMMMMM M  MMMM\\' .M MM  MMMMMMMM MM  MMMb. \"M\\n# M  MMMMM  M MM  MMMMMMMM M  MMP\\' .MM MM  MMMMMMMM MM  MMMMM  M\\n# M  MMMMM  M MM        .M M     .dMMM MM        .M MM  MMMMM  M\\n# MMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMM MMMMMMMMMMMM\\n#\\n# MM\"\"\"\"\"\"\"`YM MMP\"\"\"\"\"YMM MP\"\"\"\"\"\"`MM M\"\"\"\"\"\"\"\"M    M\"\"\"\"\"\"\"\"M M\"\"MMMMM\"\"MM M\"\"M MP\"\"\"\"\"\"`MM\\n# MM  mmmmm  M M\\' .mmm. `M M  mmmmm..M Mmmm  mmmM    Mmmm  mmmM M  MMMMM  MM M  M M  mmmmm..M\\n# M\\'        .M M  MMMMM  M M.      `YM MMMM  MMMM    MMMM  MMMM M         `M M  M M.      `YM\\n# MM  MMMMMMMM M  MMMMM  M MMMMMMM.  M MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M MMMMMMM.  M\\n# MM  MMMMMMMM M. `MMM\\' .M M. .MMM\\'  M MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M M. .MMM\\'  M\\n# MM  MMMMMMMM MMb     dMM Mb.     .dM MMMM  MMMM    MMMM  MMMM M  MMMMM  MM M  M Mb.     .dM\\n# MMMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMM    MMMMMMMMMM MMMMMMMMMMMM MMMM MMMMMMMMMMM\\n#\\n# MM\\'\"\"\"\"\\'YMM MMP\"\"\"\"\"YMM M\"\"\"\"\"\"\\'YMM MM\"\"\"\"\"\"\"\"`M    MMP\"\"\"\"\"YMM M\"\"\"\"\"\"\"`YM M\"\"MMMMMMMM M\"\"M M\"\"\"\"\"\"\"`YM MM\"\"\"\"\"\"\"\"`M\\n# M\\' .mmm. `M M\\' .mmm. `M M  mmmm. `M MM  mmmmmmmM    M\\' .mmm. `M M  mmmm.  M M  MMMMMMMM M  M M  mmmm.  M MM  mmmmmmmM\\n# M  MMMMMooM M  MMMMM  M M  MMMMM  M M`      MMMM    M  MMMMM  M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M M`      MMMM\\n# M  MMMMMMMM M  MMMMM  M M  MMMMM  M MM  MMMMMMMM    M  MMMMM  M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M MM  MMMMMMMM\\n# M. `MMM\\' .M M. `MMM\\' .M M  MMMM\\' .M MM  MMMMMMMM    M. `MMM\\' .M M  MMMMM  M M  MMMMMMMM M  M M  MMMMM  M MM  MMMMMMMM\\n# MM.     .dM MMb     dMM M       .MM MM        .M    MMb     dMM M  MMMMM  M M         M M  M M  MMMMM  M MM        .M\\n# MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMMM    MMMMMMMMMMM MMMMMMMMMMM MMMMMMMMMMM MMMM MMMMMMMMMMM MMMMMMMMMMMM\\n\\n\\n\"\"\"\\nChangelog since last major release\\n\\n5.0.6       Released 28-Jun-2024\\n\\n\\n\"\"\"\\n\\n\\n__version__ = version.split()[0]  # For PEP 396 and PEP 345\\n\\n# The shortened version of version\\ntry:\\n    ver = version.split(\\' \\')[0]\\nexcept:\\n    ver = \\'\\'\\n\\n\\nport = \\'PySimpleGUI\\'\\n\\nimport os\\nimport sys\\n\\n\\n# all of the tkinter involved imports\\nimport tkinter as tk\\nfrom tkinter import filedialog\\nfrom tkinter.colorchooser import askcolor\\nfrom tkinter import ttk\\n# import tkinter.scrolledtext as tkst\\nimport tkinter.font\\nimport uuid\\n\\n# end of tkinter specific imports\\n# get the tkinter detailed version\\ntclversion_detailed = tkinter.Tcl().eval(\\'info patchlevel\\')\\nframework_version = tclversion_detailed\\n\\nimport tempfile\\n\\nimport marshal, base64, zlib\\n\\nimport time\\nimport pickle\\nimport calendar\\nimport datetime\\nimport textwrap\\n\\nimport socket\\nimport hashlib\\nimport inspect\\nimport traceback\\nimport difflib\\nimport copy\\nimport pprint\\nimport platform\\nimport pydoc            # for the built-in PSG SDK Help Window\\n\\ntry:  # Because Raspberry Pi is still on 3.4....it\\'s not critical if this module isn\\'t imported on the Pi\\n    from typing import List, Any, Union, Tuple, Dict, SupportsAbs, Optional  # because this code has to run on 2.7 can\\'t use real type hints.  Must do typing only in comments\\nexcept:\\n    print(\\'*** Skipping import of Typing module. \"pip3 install typing\" to remove this warning ***\\')\\nimport random\\nimport warnings\\nfrom math import floor\\nfrom math import fabs\\nfrom functools import wraps\\n\\ntry:  # Because Raspberry Pi is still on 3.4....\\n    # from subprocess import run, PIPE, Popen\\n    import subprocess\\nexcept Exception as e:\\n    print(\\'** Import error {} **\\'.format(e))\\n\\nimport threading\\nimport itertools\\nimport json\\nimport configparser\\nimport queue\\n\\ntry:\\n    import webbrowser\\n\\n    webbrowser_available = True\\nexcept:\\n    webbrowser_available = False\\n# used for github upgrades\\nimport urllib.request\\nimport urllib.error\\nimport urllib.parse\\n\\n# import re\\nimport ctypes\\n\\npil_import_attempted = pil_imported = False\\n\\nwarnings.simplefilter(\\'always\\', UserWarning)\\n\\ng_time_start = 0\\ng_time_end = 0\\ng_time_delta = 0\\n\\n\\n# These timer routines are to help you quickly time portions of code.  Place the timer_start call at the point\\n# you want to start timing and the timer_stop at the end point. The delta between the start and stop calls\\n# is returned from calling timer_stop\\n\\ndef timer_start():\\n    \"\"\"\\n    Time your code easily.... starts the timer.\\n    Uses the time.time value, a technique known to not be terribly accurage, but tis\\' gclose enough for our purposes\\n    \"\"\"\\n    global g_time_start\\n\\n    g_time_start = time.time()\\n\\n\\ndef timer_stop():\\n    \"\"\"\\n    Time your code easily.... stop the timer and print the number of MILLISECONDS since the timer start\\n\\n    :return: delta in MILLISECONDS from timer_start was called\\n    :rtype:  int\\n    \"\"\"\\n    global g_time_delta, g_time_end\\n\\n    g_time_end = time.time()\\n    g_time_delta = g_time_end - g_time_start\\n    return int(g_time_delta * 1000)\\n\\n\\ndef timer_stop_usec():\\n    \"\"\"\\n    Time your code easily.... stop the timer and print the number of MICROSECONDS since the timer start\\n\\n    :return: delta in MICROSECONDS from timer_start was called\\n    :rtype:  int\\n    \"\"\"\\n    global g_time_delta, g_time_end\\n\\n    g_time_end = time.time()\\n    g_time_delta = g_time_end - g_time_start\\n    return int(g_time_delta * 1000000)\\n\\n\\n\\ndef _timeit(func):\\n    \"\"\"\\n    Put @_timeit as a decorator to a function to get the time spent in that function printed out\\n\\n    :param func: Decorated function\\n    :type func:\\n    :return:     Execution time for the decorated function\\n    :rtype:\\n    \"\"\"\\n\\n    @wraps(func)\\n    def wrapper(*args, **kwargs):\\n        start = time.time()\\n        result = func(*args, **kwargs)\\n        end = time.time()\\n        print(\\'{} executed in {:.4f} seconds\\'.format(func.__name__, end - start))\\n        return result\\n\\n    return wrapper\\n\\n\\n_timeit_counter = 0\\nMAX_TIMEIT_COUNT = 1000\\n_timeit_total = 0\\n\\n\\ndef _timeit_summary(func):\\n    \"\"\"\\n    Same as the timeit decorator except that the value is shown as an averave\\n    Put @_timeit_summary as a decorator to a function to get the time spent in that function printed out\\n\\n    :param func: Decorated function\\n    :type func:\\n    :return:     Execution time for the decorated function\\n    :rtype:\\n    \"\"\"\\n\\n    @wraps(func)\\n    def wrapper(*args, **kwargs):\\n        global _timeit_counter, _timeit_total\\n\\n        start = time.time()\\n        result = func(*args, **kwargs)\\n        end = time.time()\\n        _timeit_counter += 1\\n        _timeit_total += end - start\\n        if _timeit_counter > MAX_TIMEIT_COUNT:\\n            print(\\'{} executed in {:.4f} seconds\\'.format(func.__name__, _timeit_total / MAX_TIMEIT_COUNT))\\n            _timeit_counter = 0\\n            _timeit_total = 0\\n        return result\\n\\n    return wrapper\\n\\n\\ndef formatted_datetime_now():\\n    \"\"\"\\n    Returns a string with current date and time formatted YYYY-MM-DD HH:MM:SS for easy logging\\n\\n    :return:    String with date and time formatted YYYY-MM-DD  HH:MM:SS\\n    :rtype:     (str)\\n    \"\"\"\\n    now = datetime.datetime.now()\\n    current_time = now.strftime(\"%Y-%m-%d %H:%M:%S\")\\n    return current_time\\n\\n\\ndef running_linux():\\n    \"\"\"\\n    Determines the OS is Linux by using sys.platform\\n\\n    Returns True if Linux\\n\\n    :return: True if sys.platform indicates running Linux\\n    :rtype:  (bool)\\n    \"\"\"\\n    return sys.platform.startswith(\\'linux\\')\\n\\n\\ndef running_mac():\\n    \"\"\"\\n    Determines the OS is Mac by using sys.platform\\n\\n    Returns True if Mac\\n\\n    :return: True if sys.platform indicates running Mac\\n    :rtype:  (bool)\\n    \"\"\"\\n    return sys.platform.startswith(\\'darwin\\')\\n\\n\\ndef running_windows():\\n    \"\"\"\\n    Determines the OS is Windows by using sys.platform\\n\\n    Returns True if Windows\\n\\n    :return: True if sys.platform indicates running Windows\\n    :rtype:  (bool)\\n    \"\"\"\\n    return sys.platform.startswith(\\'win\\')\\n\\n\\ndef running_trinket():\\n    \"\"\"\\n    A special case for Trinket.  Checks both the OS and the number of environment variables\\n    Currently, Trinket only has ONE environment variable.  This fact is used to figure out if Trinket is being used.\\n\\n    Returns True if \"Trinket\" (in theory)\\n\\n    :return: True if sys.platform indicates Linux and the number of environment variables is 1\\n    :rtype:  (bool)\\n    \"\"\"\\n    if sys.platform.startswith(\\'linux\\') and socket.gethostname().startswith(\\'pygame-\\'):\\n        return True\\n    return False\\n\\n\\ndef running_replit():\\n    \"\"\"\\n    A special case for REPLIT.  Checks both the OS and for the existance of the number of environment variable REPL_OWNER\\n    Currently, Trinket only has ONE environment variable.  This fact is used to figure out if Trinket is being used.\\n\\n    Returns True if running on \"replit\"\\n\\n    :return: True if sys.platform indicates Linux and setting REPL_OWNER is found in the environment variables\\n    :rtype:  (bool)\\n    \"\"\"\\n    if \\'REPL_OWNER\\' in os.environ and sys.platform.startswith(\\'linux\\'):\\n        return True\\n    return False\\n\\n\\n# Handy python statements to increment and decrement with wrapping that I don\\'t want to forget\\n# count = (count + (MAX - 1)) % MAX           # Decrement - roll over to MAX from 0\\n# count = (count + 1) % MAX                   # Increment to MAX then roll over to 0\\n\\n# ----====----====----==== Constants the user CAN safely change ====----====----====----#\\n\\n# Base64 encoded GIF file\\nDEFAULT_BASE64_ICON = b\\'iVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAQFklEQVR4nLWba5RkVXXHf/uce6urqh8DCMGV4FsgMszDYAxqspgxAZkBedo1ibCECDoxRlfQLBUdproaCCCKrpj4iAGJixVIdUAQZsYHZgaXwUAcZXqGwRBjjBENiMP0o973nJ0Pt7q7urpuPQayP3TXvffcc/b/f87ZZ5+9zxVeAFEdtyJTbvF635oTyAZpylGVRuqQvG5vuVO5LiIUi4ZcLi6b3zlGyBkovwecjMqvI2pAHkPlfraffS8AxaJdfKdPkUEKt4vmMUygIqg+tvYVZOSPUc7C6auBFIY6Rp7F6Z2Y8G/kN/c+q0Ws5EhWMp83FAoegOt3roXwXWh0DmJfQZgCr6DxY4wB58DrQ7joavKbvkteDQVRQP9fCWjtTX1i3ccI5UNkzBh1hYaPmxcBCwwZqPpfUPcfkVOmv6yKgZi4ZZWOFy1TOcd4PsXaN3wAa/MMZdPUKxDVFcSDSovaiqohPSxEdYePrmbbpptjEicUpCcJR0SA7j4jkI0PRfr4a19GqF8ga97CvAfvIxQTI1+iCvCkTEAoUPGT8pp9eVUEEBHi7lzo+W33nkxm+HZS6dOplUB9hGIRSdBVQL1DxJAdE8qzf801m95HPm+YmFCkOwkDE7DQ87pvzelkTJGMfQmzUQRikS71qXoEGAsMc+5Wvh28R7bubWgeI+ShUPDkd55OGNxLauh4aqUewBfU14X6FRFHZiSgOv9Ftp29lTzCBF1JGIiAxZ6fPvVCsvYORLJUfYQQ9FWVAqIRY0FAye+mUX+7nHrwfzWfN5I+/aU4eRwbZolqEUgwiG5LZGhE9qiA0sytbN90ZdMwehJsgum3+kXwB9a+j5HgHhxZqt4j0gZe2/636YgEzEQNxsxGgtSd+vAJGSkU/GnHzD2H+gcJh/pVqV3DhUYCyjMR2dErmNxxM7mco1hMxNkXAUvg113FWPBX1NUT4RFpe19ZIiNpRCiIhByKIrKywR/zol36xBtH927NzVx2wtNbqJbvJTMWgEb96JYglupcRHbsL5jccTW5nCO/u+OI6jluF+f8gTVXMRbcQsk5PCZ5braS0LPyiFVBQDnaXZkNL8++bu9P8/l8qhC+4U4yoxdRnmmZCi3zvb+6FTGeVNpSK/8R2zffRVEtOVm2BHfVdGnOr/0gR9tPMJ8EvhfoLs9VI0ZsQF1/Nv+c3zT6+ukDl+Xz6b8P33g76ewWKnNd7EFPUjw2AKVE3b2ewtk/bPoJvrWGBL0We/5yjgq/xHwU4XpZ5SSgPQhSH5ENAhr603rZXzC0fvoHWhy38sMr7iY7ej6VmQhM0BlsEgnN+6qeoYyhXj1AlH4D7Cm3Lo8dbYAWm+CfWLeBjP0cJeeIeoFvRasOVQfqlpRZIKKTriag5ByhvDSVlZ3V768/UXJT7szMM5dQnX+QoeEA9QneYzfSARFDrRKRHTuVsHoVhYJnagn3ijebDgrsW5sllO+TNSdRch7TbvA6tqkIQtaAEXAKZadNRXqT59WRtZaG/1F13mzKnPaDH73yxuKqHzfGvkM4dCqNiodWPXr0fkvN2FCIGk/j9GQKm2ebHqWuBLXnDCuCEsp7OcqeRNlFvcFrbHRCEVAo+a9Tiv6WsttNIIIRQfuwYEYsFedIm1enR/wDP//+7x73k4/kZoa18na8m8MELEeWVOWK+4ao4UlnX4zlPADye2z8oF02PORUxy1wCTWvS2W66K+iBAKqh1A9U1bvO1teM71VVk+/GacXY5jHoDEJ7fW0XYtY5lzEqD35+HD2sx6VyvYL9xNVbmYoa1A8RyqCgry9CdRDGwGqzb76jx+/HNGTqKss+fXtzk6L4qKejBHq/hpZvf9B/d5poeq41d1nBHLK9D1E/iayxiDqVs66DjPDEHA4isyofVtl32+92avKutHoM1TmniIILQxKggBqaNQFZD03fnMVBfGotg/t8VibKHoVQyaNU9/Zv5clxRXFiGXO1QjMTlUMp+11IlOOXz6kWsSi9h5KLkLF9q8wYNF0yl+BGD1w1YWHUf3npqfYgYAWnVaIxv3oPaCrqERHAzAxkTC3jc9gpDlk+pDYEBu8hEyNC1NNTcabf7TTZqSPnapDXMO/qlj8RxvFRuupeEAO4BCtbDPEsuhvLydgzzOx4mqOxvbZjiB4dYwGIer/UHJTjvG8qmKYGkdyUw5xF5C1QTwFFn323roaiJzO5XJbnEW0y+LFimnZ6bkYECo4LS3cTbDumqavJX9BHzHMOyWUj+rB9ZcxdTDe549PeX187RZC+SgV70HsoBtQ71WhuTZ7/Y04vJCoSJd7olgLys84OP8LAAoTHZZBAC9jzSnV71gTPIKSZojbWf3ve/XA2ns4uO5RQrkLZQTfdZK2icY1BiI4vgFIpBiUNfgIBtjFtqLChophP1M5R7FoQbSzj23IDhwqEcCp4lXJ2HVY1uGAqvOoSNdgyUpVHaM25Dl3YK507OcENLz+/t8mDFdTr3bbWCTfU6TpphUBePw4gSNjMqEhmt6eGCrOM+9cc9ibJfB9DCivnrSx1PSZmnPjx298aH57fncQEXwKG4bNEFtyeKyjuuoYyliqc//KsT+9Pw6/bXSQRIDv1Vu9HotBxCLt9fcyfOpJiQBz1LgwvfbADy1QCKpfYGjkjdQqbrkrvKKCTnUqNoSo3sDoe9i6tQETi4WPcAS8gCK64Lp7rAhGNCq5S2XNYw8HgJvccQ2Z0XdSnY8Q+vQjWus3ntSQZfbwn7Lt3McYL9rW7XACAf5IF9rBRSW2HRYIBMp6Wbhu/1cDICrs+BDpkUmq8xHQI0bYcWmMSA9bZp/9DDfl/o5i0TKVW+ZEJRnB+srR1Dr12qdhr+tO0iyjKIEoKTGu5K8M1k7f0QT/J2RGb6JecXhvuy/LHZwj1QYjR4XMPDvFtRe9n/zugNxG114wwQaYDvcl4fcAIbD2+hTF4gnFUPJXBmumbw2AaHLnOwmHPhuDdwYx/YXGF1XyEdmxkLnnvg0zV5JXw8SGFeAhiQDVHnOt1evqFBHugxCvilHPsLWU3VWyCP5rHySVvhV1GoNvbrGXSac2Fy59RHZVQGn2YQ7sP4+JS+dgj0nKDXQmQLTRXft2n2YA4BCDD0RJG8tM9H5Zs//TzZ7/GNmRTxDVHc5Jcs8nmCjVGHx55js8Nb2Z4odnEVEKGyPy+Y5YO9sAGTQpMYCoxh5eIFD2V8ip07dZILpu558TZq+jMu9Qn9DzXSuOyI4FlGa+zZOPvpU7JuYRUa594A9QTbH9rTs7ZY8TRoDYwaZ1lyHZWsTjCY3BAiUuldXTtwWAu27X1YTZT9GotYAfQFQjMk3we/ecy6sn5hHxXLvzLEzqq9j0P3HNfW9qJkmWTe8kG9DC0qArYgIZTj1pMU51npKeJ+seuzO29ju3kx75S+o1h/YyeB2VjXu+Mv919u45l/s+XqIgnokdWwiG7gPNIGRIZ+9n293r4iTJ0nRIIKA98Pg8RdWTNsZFeuip/6xskvXTD8Tgd02QHSnE67xrZpUHIrxBejSgPPsg0X9fxGs/XkLEc93OC0ml7sS7NN57XOQIgqNJZe7hPTcczcSELpCQFBAZFGHC/XgTSyjinc7aqm5+2eYnvxODf2A7w6N5auUIrzYOI3eT9scaL3XVud246HxWv7tGQTyTO96BTU/hPfjIE2O01CsR2bFXctwpn45XhIkY6mDgugFNCkgoWKF22L1L1k8/EgJRYcefkRmNe1697c/gLdMjIj0SMD/zVaYfOY/V1Ro5cUzueAdh+nZcw+AdbSH0gMq8IzPyDq6+600UxDNetH1Y+yQHaEGpbslQdQxby5x7KPs7B4qqeSPXn74eE9xCo+abHl7bi71CXk2DV569D//I2zhlwpMTz+SuywnC23ARqNeViVsAVcIUpIavAP6F8fFBPMFO0ju3ihUwfEsVCaXgUdlGmA7xkV8Cn7SKrCDckx4JqMx9k1VsgQ1QEM+1D2wlTH0J74h7vouDV6+CNedw1RePIScuyRHqP3LT8Xr5fYdBBD3h5jtehvqzqJU1Do8ta7RXY54gLdTKjxDp2ziUcRQ2Rkw8cAVDo5/HNTzeJWSgFniWmCDVY6nWj4ckR6hjFLeTtG+OOkwHhchJDeC5aPRVBKlhorouV7SvDI8nTAXUyt+icO4sAIUdFxOmPhf7Dyp9+A+CKphAOPrFGUjeDbYksvrZ7HR7riDEhx2MF9xChDOpnkQ311Irg7XvprBjBuREwvBK1INz2h18e/YJIZ1RSCLAe1kaoc/TDxDB4o8BCL0cioOarSOln1WGeGj7CExwLOmRm0ChWqJ5OKo/JVWVIBSixnO46H8gcRl8voGi5UCM+OMArj/m6QOoPkoqI2iXw5KJIuAipTofUSnF29uOhrSl/PJrTzikOL+HwnnPktcEa6/9GsEuiraIUSoA7926tYG6W5bKHEHgKQYcNMNjPexI2/SVZkA1qu+Kb+xJIMBQ765FgvVPos25COAfivkU288tUivvIp2xRzYKBpVFXT02ZanMHaL8q7sBmNiQsAyqVLt3Tnvv9Yh6+wU392D8z+h2okZ81vfIE32DiiNICao38Kl3HaJYtEinAxIQ589aMlKdZZA8Ryzjxz3jKRYt2875HtXyx0kPWyDq7m0OKh3e1+a+oTz3dfLnfoK8mubhyUSPqdy5X3olIPuQXC4mYfK8D1Oe+QrDq0LUt5wJfD71dwyOxvuGyvx3qdYuic8QLwEZ0NwPkN5LBqKMj3tUBVe6ktLMo6SHmwcjn+9IWBGdjsiMBtQr05RmzufGi34VV73k6C0nYMOvLTwo4QfVoVvgsv2RKBMTQiF3iFJlM43qEwyNBC/cSIB4xzgaUK88QqOyiRtyv0R16VuEpiSsAu3H2/qR5LLGdDjRUSh4xouWGy/6FXW/mUb1cdIjAbpwRPYIQ+3x1xRxz9fK93C4fCaFC35OXg0iK/RIWgYPE+kL4A8AinrRzhGWqZyLU1WbfkJ97mwa1X8j2zwnrP1kp5YNd0W9IwgNmZGAWvnLNB4e5+YL5tpPh7bKcld4Yipu1KUeJ2qUCWSISNsORQ+QCInjMWKMeTqxzCIJF/+M/FfOAj5PZmxL7Oa6CLAkpoW0CRyPMZbMiKVePki5fC3b33IXqJAnETydkKjmjUjB6xPrPslx4Qd4tgEOT/ejGZ0MsDJkAiItY806OfEHP9I8RgoJJ7xavxWa/NoHseZahrIZaiXwzi9XV4mzqioYaxgahnqljHe30PA3U9g829wdLhTuqnYbAc17e86wHH/4k4RcgpEXEXaN/Ky8FPB1nTcNf7m8Zvru5hG87sHGhSknokzuOpnAvg+vlxKkVsVh9ZaPpRYYb9RmEPMVXOMWtp+zHxjo67HeIZ0n15yA2t+vRfqS+TlnwMtK07EQe1z6nUqb+qg1O2XNY/u69nwnaQUw+Y0TMXomIhvw7uUoIcLPUfkvjExjoj189Jwn4/fUMo7v9Z1Qq/wf9GqvpKr/2kkAAAAASUVORK5CYII=\\'\\n\\nDEFAULT_BASE64_ICON_16_BY_16 = b\\'iVBORw0KGgoAAAANSUhEUgAAABAAAAAOCAYAAAAmL5yKAAACmUlEQVR4nFWQS2icVRiGn++c8/+ZS2ZiJ4guQkGQULFgNS66cFMQ6wVR8EJFXBUKxVWpROOFEgXxAtqFSMGKXQiKurC2CeLKldZLxIobpQkEWy3SmcY680/m/8/5PhfTVvrsn5f3fQXADBHBAGx1x0E8e4icQvvPyOzaKH9j6bEy5fMgs6DH2fT7WNy1iZnIFdlsLuNM+oC6e5K+QstDHJ58fHnh2U+7Mz+4mmto0Tca1wllsUSzeoTed5WY4ViZ87SrT2hnD9ONMOWhn6AVIBZf33l88cOVf298W2TYtKiRdidnsHGEF3bvFwD7fcdepvxRejECl3DyKkmf0sxtd83gsfOfXX/syOle1nrZRoWaOABD3R2O8QlzlKZ4CRh/M/vzWyA/urrz2o0lccujr+z8fFUHqXBOPJoEHwLBbgoACBkOR6UR77bx220XgC38E6ObruXEv5ZfW3nwBmm4hpYpktUCqbpAPvH9OOAKAqhBkA5RE1MTAe2eeuDkix+vV9OHHQNV8R4Rw/snmN91fjzBcS2VJtq5h4vfPrR04L3l3q2HnRt01PD4LFKO9kE8879qyFXZTKkHR7r0ze4Tz7/zRff2N70vOppIZHmBpj2EsBPLfuXQlze7q9Uvk0wgU1nfmPnoq3O3LOQTo06qYiTLhWrzIMY91Jp7CVkTr/uv/QAQAUwZmquJKye10gR4yqGBWyDPttK/WFJv5SD9cQO1iGGAOUzxuW2bOb1u5fQijZZHSIDgw1ZGw5LaZE65eQ6Ro+OAJMqECEiGSCCYpI2ZaV7ffswVvXeptwPihVRBfTJHdZXM3c9L9/5x+QM9oYWuJeFscpzVQVpTcz9hSHzuvqephvM4/ych66LpfYaDu5i/+xcOmfsPXNAyV3hjwl8AAAAASUVORK5CYII=\\'\\n\\nDEFAULT_BASE64_LOADING_GIF = b\\'\\'\\n\\nPSG_DEBUGGER_LOGO = b\\'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\\'\\n\\nUDEMY_ICON = b\\'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\\'\\n\\nPSG5_LOGO = b\\'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\\'\\n\\nBLANK_BASE64 = b\\'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=\\'\\n\\nDEFAULT_WINDOW_ICON = DEFAULT_BASE64_ICON\\n\\nDEFAULT_ELEMENT_SIZE = (45, 1)  # In CHARACTERS\\nDEFAULT_BUTTON_ELEMENT_SIZE = (10, 1)  # In CHARACTERS\\nDEFAULT_MARGINS = (10, 5)  # Margins for each LEFT/RIGHT margin is first term\\nDEFAULT_ELEMENT_PADDING = (5, 3)  # Padding between elements (row, col) in pixels\\nDEFAULT_AUTOSIZE_TEXT = True\\nDEFAULT_AUTOSIZE_BUTTONS = True\\nDEFAULT_FONT = (\"Helvetica\", 10)\\nDEFAULT_TEXT_JUSTIFICATION = \\'left\\'\\nDEFAULT_BORDER_WIDTH = 1\\nDEFAULT_AUTOCLOSE_TIME = 3  # time in seconds to show an autoclose form\\nDEFAULT_DEBUG_WINDOW_SIZE = (80, 20)\\nDEFAULT_WINDOW_LOCATION = (None, None)\\nMAX_SCROLLED_TEXT_BOX_HEIGHT = 50\\nDEFAULT_TOOLTIP_TIME = 400\\nDEFAULT_TOOLTIP_OFFSET = (0, -20)\\nDEFAULT_KEEP_ON_TOP = None\\nDEFAULT_SCALING = None\\nDEFAULT_ALPHA_CHANNEL = 1.0\\nDEFAULT_HIDE_WINDOW_WHEN_CREATING = True\\nTOOLTIP_BACKGROUND_COLOR = \"#ffffe0\"\\nTOOLTIP_FONT = None\\nDEFAULT_USE_BUTTON_SHORTCUTS = False\\n#################### COLOR STUFF ####################\\nBLUES = (\"#082567\", \"#0A37A3\", \"#00345B\")\\nPURPLES = (\"#480656\", \"#4F2398\", \"#380474\")\\nGREENS = (\"#01826B\", \"#40A860\", \"#96D2AB\", \"#00A949\", \"#003532\")\\nYELLOWS = (\"#F3FB62\", \"#F0F595\")\\nTANS = (\"#FFF9D5\", \"#F4EFCF\", \"#DDD8BA\")\\nNICE_BUTTON_COLORS = ((GREENS[3], TANS[0]),\\n                      (\\'#000000\\', \\'#FFFFFF\\'),\\n                      (\\'#FFFFFF\\', \\'#000000\\'),\\n                      (YELLOWS[0], PURPLES[1]),\\n                      (YELLOWS[0], GREENS[3]),\\n                      (YELLOWS[0], BLUES[2]))\\n\\nCOLOR_SYSTEM_DEFAULT = \\'1234567890\\'  # A Magic Number kind of signal to PySimpleGUI that the color should not be set at all\\nDEFAULT_BUTTON_COLOR = (\\'white\\', BLUES[0])  # Foreground, Background (None, None) == System Default\\nOFFICIAL_PYSIMPLEGUI_BUTTON_COLOR = (\\'white\\', BLUES[0])\\n\\n# The \"default PySimpleGUI theme\"\\nOFFICIAL_PYSIMPLEGUI_THEME = CURRENT_LOOK_AND_FEEL = \\'Dark Blue 3\\'\\n\\nDEFAULT_ERROR_BUTTON_COLOR = (\"#FFFFFF\", \"#FF0000\")\\nDEFAULT_BACKGROUND_COLOR = None\\nDEFAULT_ELEMENT_BACKGROUND_COLOR = None\\nDEFAULT_ELEMENT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT\\nDEFAULT_TEXT_ELEMENT_BACKGROUND_COLOR = None\\nDEFAULT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT\\nDEFAULT_INPUT_ELEMENTS_COLOR = COLOR_SYSTEM_DEFAULT\\nDEFAULT_INPUT_TEXT_COLOR = COLOR_SYSTEM_DEFAULT\\nDEFAULT_SCROLLBAR_COLOR = None\\n\\n\\n\\n# A transparent button is simply one that matches the background\\n# TRANSPARENT_BUTTON = \\'This constant has been depricated. You must set your button background = background it is on for it to be transparent appearing\\'\\n\\n\\n# --------------------------------------------------------------------------------\\n# Progress Bar Relief Choices\\nRELIEF_RAISED = \\'raised\\'\\nRELIEF_SUNKEN = \\'sunken\\'\\nRELIEF_FLAT = \\'flat\\'\\nRELIEF_RIDGE = \\'ridge\\'\\nRELIEF_GROOVE = \\'groove\\'\\nRELIEF_SOLID = \\'solid\\'\\nRELIEF_LIST = (RELIEF_RAISED, RELIEF_FLAT, RELIEF_SUNKEN, RELIEF_RIDGE, RELIEF_SOLID, RELIEF_GROOVE)\\n\\n# These are the spepific themes that tkinter offers\\nTHEME_DEFAULT = \\'default\\'  # this is a TTK theme, not a PSG theme!!!\\nTHEME_WINNATIVE = \\'winnative\\'\\nTHEME_CLAM = \\'clam\\'\\nTHEME_ALT = \\'alt\\'\\nTHEME_CLASSIC = \\'classic\\'\\nTHEME_VISTA = \\'vista\\'\\nTHEME_XPNATIVE = \\'xpnative\\'\\n\\n# The theme to use by default for all windows\\nDEFAULT_TTK_THEME = THEME_DEFAULT\\nttk_theme_in_use = None\\n\\n\\nUSE_TTK_BUTTONS = None\\n\\nDEFAULT_PROGRESS_BAR_COLOR = (\"#01826B\", \\'#D0D0D0\\')  # a nice green progress bar\\nDEFAULT_PROGRESS_BAR_COMPUTE = (\\'#000000\\', \\'#000000\\')  # Means that the progress bar colors should be computed from other colors\\nDEFAULT_PROGRESS_BAR_COLOR_OFFICIAL = (\"#01826B\", \\'#D0D0D0\\')  # a nice green progress bar\\nDEFAULT_PROGRESS_BAR_SIZE = (20, 20)  # Size of Progress Bar (characters for length, pixels for width)\\nDEFAULT_PROGRESS_BAR_BORDER_WIDTH = 1\\nDEFAULT_PROGRESS_BAR_RELIEF = RELIEF_GROOVE\\n# PROGRESS_BAR_STYLES = (\\'default\\', \\'winnative\\', \\'clam\\', \\'alt\\', \\'classic\\', \\'vista\\', \\'xpnative\\')\\nDEFAULT_PROGRESS_BAR_STYLE = DEFAULT_TTK_THEME\\nDEFAULT_METER_ORIENTATION = \\'Horizontal\\'\\nDEFAULT_SLIDER_ORIENTATION = \\'vertical\\'\\nDEFAULT_SLIDER_BORDER_WIDTH = 1\\nDEFAULT_SLIDER_RELIEF = tk.FLAT\\nDEFAULT_FRAME_RELIEF = tk.GROOVE\\n\\nDEFAULT_LISTBOX_SELECT_MODE = tk.SINGLE\\nSELECT_MODE_MULTIPLE = tk.MULTIPLE\\nLISTBOX_SELECT_MODE_MULTIPLE = \\'multiple\\'\\nSELECT_MODE_BROWSE = tk.BROWSE\\nLISTBOX_SELECT_MODE_BROWSE = \\'browse\\'\\nSELECT_MODE_EXTENDED = tk.EXTENDED\\nLISTBOX_SELECT_MODE_EXTENDED = \\'extended\\'\\nSELECT_MODE_SINGLE = tk.SINGLE\\nLISTBOX_SELECT_MODE_SINGLE = \\'single\\'\\n\\nTABLE_SELECT_MODE_NONE = tk.NONE\\nTABLE_SELECT_MODE_BROWSE = tk.BROWSE\\nTABLE_SELECT_MODE_EXTENDED = tk.EXTENDED\\nDEFAULT_TABLE_SELECT_MODE = TABLE_SELECT_MODE_EXTENDED\\nTABLE_CLICKED_INDICATOR = \\'+CLICKED+\\'  # Part of the tuple returned as an event when a Table element has click events enabled\\nDEFAULT_MODAL_WINDOWS_ENABLED = True\\nDEFAULT_MODAL_WINDOWS_FORCED = False\\n\\nTAB_LOCATION_TOP = \\'top\\'\\nTAB_LOCATION_TOP_LEFT = \\'topleft\\'\\nTAB_LOCATION_TOP_RIGHT = \\'topright\\'\\nTAB_LOCATION_LEFT = \\'left\\'\\nTAB_LOCATION_LEFT_TOP = \\'lefttop\\'\\nTAB_LOCATION_LEFT_BOTTOM = \\'leftbottom\\'\\nTAB_LOCATION_RIGHT = \\'right\\'\\nTAB_LOCATION_RIGHT_TOP = \\'righttop\\'\\nTAB_LOCATION_RIGHT_BOTTOM = \\'rightbottom\\'\\nTAB_LOCATION_BOTTOM = \\'bottom\\'\\nTAB_LOCATION_BOTTOM_LEFT = \\'bottomleft\\'\\nTAB_LOCATION_BOTTOM_RIGHT = \\'bottomright\\'\\n\\nTITLE_LOCATION_TOP = tk.N\\nTITLE_LOCATION_BOTTOM = tk.S\\nTITLE_LOCATION_LEFT = tk.W\\nTITLE_LOCATION_RIGHT = tk.E\\nTITLE_LOCATION_TOP_LEFT = tk.NW\\nTITLE_LOCATION_TOP_RIGHT = tk.NE\\nTITLE_LOCATION_BOTTOM_LEFT = tk.SW\\nTITLE_LOCATION_BOTTOM_RIGHT = tk.SE\\n\\nTEXT_LOCATION_TOP = tk.N\\nTEXT_LOCATION_BOTTOM = tk.S\\nTEXT_LOCATION_LEFT = tk.W\\nTEXT_LOCATION_RIGHT = tk.E\\nTEXT_LOCATION_TOP_LEFT = tk.NW\\nTEXT_LOCATION_TOP_RIGHT = tk.NE\\nTEXT_LOCATION_BOTTOM_LEFT = tk.SW\\nTEXT_LOCATION_BOTTOM_RIGHT = tk.SE\\nTEXT_LOCATION_CENTER = tk.CENTER\\n\\nGRAB_ANYWHERE_IGNORE_THESE_WIDGETS = (ttk.Sizegrip, tk.Scale, ttk.Scrollbar, tk.Scrollbar, tk.Entry, tk.Text, tk.PanedWindow, tk.Listbox, tk.OptionMenu, ttk.Treeview)\\n\\n# ----====----====----==== Constants the user should NOT f-with ====----====----====----#\\nThisRow = 555666777  # magic number\\n\\n# DEFAULT_WINDOW_ICON = \\'\\'\\nMESSAGE_BOX_LINE_WIDTH = 60\\n\\n# \"Special\" Key Values.. reserved\\n# Key representing a Read timeout\\nEVENT_TIMEOUT = TIMEOUT_EVENT = TIMEOUT_KEY = \\'__TIMEOUT__\\'\\nEVENT_TIMER = TIMER_KEY = \\'__TIMER EVENT__\\'\\nWIN_CLOSED = WINDOW_CLOSED = None\\nWINDOW_CLOSE_ATTEMPTED_EVENT = WIN_X_EVENT = WIN_CLOSE_ATTEMPTED_EVENT = \\'-WINDOW CLOSE ATTEMPTED-\\'\\nWINDOW_CONFIG_EVENT = \\'__WINDOW CONFIG__\\'\\nTITLEBAR_MINIMIZE_KEY = \\'__TITLEBAR MINIMIZE__\\'\\nTITLEBAR_MAXIMIZE_KEY = \\'__TITLEBAR MAXIMIZE__\\'\\nTITLEBAR_CLOSE_KEY = \\'__TITLEBAR CLOSE__\\'\\nTITLEBAR_IMAGE_KEY = \\'__TITLEBAR IMAGE__\\'\\nTITLEBAR_TEXT_KEY = \\'__TITLEBAR TEXT__\\'\\nTITLEBAR_KEY = \\'__TITLEBAR__\\'\\nTITLEBAR_DO_NOT_USE_AN_ICON = \\'__TITLEBAR_NO_ICON__\\'\\n\\n\\n# Key indicating should not create any return values for element\\nWRITE_ONLY_KEY = \\'__WRITE ONLY__\\'\\n\\nMENU_DISABLED_CHARACTER = \\'!\\'\\nMENU_SHORTCUT_CHARACTER = \\'&\\'\\nMENU_KEY_SEPARATOR = \\'::\\'\\nMENU_SEPARATOR_LINE = \\'---\\'\\nMENU_RIGHT_CLICK_EDITME_EXIT = [\\'\\', [\\'Edit Me\\', \\'Exit\\']]\\nMENU_RIGHT_CLICK_EDITME_VER_EXIT = [\\'\\', [\\'Edit Me\\', \\'Version\\', \\'Exit\\']]\\nMENU_RIGHT_CLICK_EDITME_VER_EXPLORER_EXIT = [\\'\\', [\\'Edit Me\\', \\'Version\\', \\'Show in Explorer\\', \\'Exit\\']]\\nMENU_RIGHT_CLICK_EDITME_VER_LOC_EXIT = [\\'\\', [\\'Edit Me\\', \\'Version\\', \\'File Location\\', \\'Exit\\']]\\nMENU_RIGHT_CLICK_EDITME_VER_SETTINGS_EXIT = [\\'\\', [\\'Edit Me\\', \\'Settings\\', \\'Version\\', \\'Exit\\']]\\nMENU_RIGHT_CLICK_EXIT = [\\'\\', [\\'Exit\\']]\\nMENU_RIGHT_CLICK_DISABLED = [\\'\\', []]\\n_MENU_RIGHT_CLICK_TABGROUP_DEFAULT = [\\'TABGROUP DEFAULT\\', []]\\nENABLE_TK_WINDOWS = False\\n\\nUSE_CUSTOM_TITLEBAR = None\\nCUSTOM_TITLEBAR_BACKGROUND_COLOR = None\\nCUSTOM_TITLEBAR_TEXT_COLOR = None\\nCUSTOM_TITLEBAR_ICON = None\\nCUSTOM_TITLEBAR_FONT = None\\nTITLEBAR_METADATA_MARKER = \\'This window has a titlebar\\'\\n\\nCUSTOM_MENUBAR_METADATA_MARKER = \\'This is a custom menubar\\'\\n\\nSUPPRESS_ERROR_POPUPS = False\\nSUPPRESS_RAISE_KEY_ERRORS = True\\nSUPPRESS_KEY_GUESSING = False\\nSUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS = False\\nENABLE_TREEVIEW_869_PATCH = True\\n\\n# These are now set based on the global settings file\\nENABLE_MAC_NOTITLEBAR_PATCH = False\\nENABLE_MAC_MODAL_DISABLE_PATCH = False\\nENABLE_MAC_DISABLE_GRAB_ANYWHERE_WITH_TITLEBAR = True\\nENABLE_MAC_ALPHA_99_PATCH = False\\n\\nOLD_TABLE_TREE_SELECTED_ROW_COLORS = (\\'#FFFFFF\\', \\'#4A6984\\')\\nALTERNATE_TABLE_AND_TREE_SELECTED_ROW_COLORS = (\\'SystemHighlightText\\', \\'SystemHighlight\\')\\n\\n# Some handy unicode symbols\\nSYMBOL_SQUARE = \\'\\xe2\\x96\\x88\\'\\nSYMBOL_CIRCLE = \\'\\xe2\\x9a\\xab\\'\\nSYMBOL_CIRCLE_OUTLINE = \\'\\xe2\\x97\\xaf\\'\\nSYMBOL_BULLET = \\'\\xe2\\x80\\xa2\\'\\nSYMBOL_UP = \\'\\xe2\\x96\\xb2\\'\\nSYMBOL_RIGHT = \\'\\xe2\\x96\\xba\\'\\nSYMBOL_LEFT = \\'\\xe2\\x97\\x84\\'\\nSYMBOL_DOWN = \\'\\xe2\\x96\\xbc\\'\\nSYMBOL_X = \\'\\xe2\\x9d\\x8e\\'\\nSYMBOL_CHECK = \\'\\xe2\\x9c\\x85\\'\\nSYMBOL_CHECK_SMALL = \\'\\xe2\\x9c\\x93\\'\\nSYMBOL_X_SMALL = \\'\\xe2\\x9c\\x97\\'\\nSYMBOL_BALLOT_X = \\'\\xe2\\x98\\x92\\'\\nSYMBOL_BALLOT_CHECK = \\'\\xe2\\x98\\x91\\'\\nSYMBOL_LEFT_DOUBLE = \\'\\xc2\\xab\\'\\nSYMBOL_RIGHT_DOUBLE = \\'\\xc2\\xbb\\'\\nSYMBOL_LEFT_ARROWHEAD = \\'\\xe2\\xae\\x9c\\'\\nSYMBOL_RIGHT_ARROWHEAD = \\'\\xe2\\xae\\x9e\\'\\nSYMBOL_UP_ARROWHEAD = \\'\\xe2\\xae\\x9d\\'\\nSYMBOL_DOWN_ARROWHEAD = \\'\\xe2\\xae\\x9f\\'\\nSYMBOL_HOURGLASS = \\'\\xe2\\x8c\\x9b\\' if running_windows() or running_mac() else \\'\\'\\n\\nif sum([int(i) for i in tclversion_detailed.split(\\'.\\')]) > 19:\\n    SYMBOL_TITLEBAR_MINIMIZE = \\'_\\'\\n    SYMBOL_TITLEBAR_MAXIMIZE = \\'\\xe2\\x97\\xbb\\'\\n    SYMBOL_TITLEBAR_CLOSE = \\'\\xef\\xbc\\xb8\\'\\nelse:\\n    SYMBOL_TITLEBAR_MINIMIZE = \\'_\\'\\n    SYMBOL_TITLEBAR_MAXIMIZE = \\'O\\'\\n    SYMBOL_TITLEBAR_CLOSE = \\'X\\'\\n\\n#################### PATHS for user_settings APIs ####################\\n# These paths are passed to os.path.expanduser to get the default path for user_settings\\n# They can be changed using set_options\\n\\nDEFAULT_USER_SETTINGS_WIN_PATH = r\\'~\\\\AppData\\\\Local\\\\PySimpleGUI\\\\settings\\'\\nDEFAULT_USER_SETTINGS_LINUX_PATH = r\\'~/.config/PySimpleGUI/settings\\'\\nDEFAULT_USER_SETTINGS_MAC_PATH = r\\'~/Library/Application Support/PySimpleGUI/settings\\'\\nDEFAULT_USER_SETTINGS_TRINKET_PATH = r\\'.\\'\\nDEFAULT_USER_SETTINGS_REPLIT_PATH = r\\'.\\'\\nDEFAULT_USER_SETTINGS_UNKNOWN_OS_PATH = r\\'~/Library/Application Support/PySimpleGUI/settings\\'\\nDEFAULT_USER_SETTINGS_PATH = None  # value set by user to override all paths above\\nDEFAULT_USER_SETTINGS_PYSIMPLEGUI_PATH = None  # location of the global PySimpleGUI settings\\nDEFAULT_USER_SETTINGS_PYSIMPLEGUI_FILENAME = \\'_PySimpleGUI_settings_global_.json\\'  # location of the global PySimpleGUI settings\\n\\n\\n\\n# ====================================================================== #\\n# One-liner functions that are handy as f_ck                             #\\n# ====================================================================== #\\ndef rgb(red, green, blue):\\n    \"\"\"\\n    Given integer values of Red, Green, Blue, return a color string \"#RRGGBB\"\\n    :param red:   Red portion from 0 to 255\\n    :type red:    (int)\\n    :param green: Green portion from 0 to 255\\n    :type green:  (int)\\n    :param blue:  Blue portion from 0 to 255\\n    :type  blue:  (int)\\n    :return:      A single RGB String in the format \"#RRGGBB\" where each pair is a hex number.\\n    :rtype:       (str)\\n    \"\"\"\\n    red = min(int(red), 255) if red > 0 else 0\\n    blue = min(int(blue), 255) if blue > 0 else 0\\n    green = min(int(green), 255) if green > 0 else 0\\n    return \\'#%02x%02x%02x\\' % (red, green, blue)\\n\\n\\n# ====================================================================== #\\n# Enums for types                                                        #\\n# ====================================================================== #\\n# -------------------------  Button types  ------------------------- #\\n# uncomment this line and indent to go back to using Enums\\nBUTTON_TYPE_BROWSE_FOLDER = 1\\nBUTTON_TYPE_BROWSE_FILE = 2\\nBUTTON_TYPE_BROWSE_FILES = 21\\nBUTTON_TYPE_SAVEAS_FILE = 3\\nBUTTON_TYPE_CLOSES_WIN = 5\\nBUTTON_TYPE_CLOSES_WIN_ONLY = 6\\nBUTTON_TYPE_READ_FORM = 7\\nBUTTON_TYPE_REALTIME = 9\\nBUTTON_TYPE_CALENDAR_CHOOSER = 30\\nBUTTON_TYPE_COLOR_CHOOSER = 40\\nBUTTON_TYPE_SHOW_DEBUGGER = 50\\n\\nBROWSE_FILES_DELIMITER = \\';\\'  # the delimiter to be used between each file in the returned string\\n\\nFILE_TYPES_ALL_FILES = ((\"ALL Files\", \"*.* *\"),)\\n\\nBUTTON_DISABLED_MEANS_IGNORE = \\'ignore\\'\\n\\n# -------------------------  Element types  ------------------------- #\\n\\nELEM_TYPE_TEXT = \\'text\\'\\nELEM_TYPE_INPUT_TEXT = \\'input\\'\\nELEM_TYPE_INPUT_COMBO = \\'combo\\'\\nELEM_TYPE_INPUT_OPTION_MENU = \\'option menu\\'\\nELEM_TYPE_INPUT_RADIO = \\'radio\\'\\nELEM_TYPE_INPUT_MULTILINE = \\'multiline\\'\\nELEM_TYPE_INPUT_CHECKBOX = \\'checkbox\\'\\nELEM_TYPE_INPUT_SPIN = \\'spind\\'\\nELEM_TYPE_BUTTON = \\'button\\'\\nELEM_TYPE_IMAGE = \\'image\\'\\nELEM_TYPE_CANVAS = \\'canvas\\'\\nELEM_TYPE_FRAME = \\'frame\\'\\nELEM_TYPE_GRAPH = \\'graph\\'\\nELEM_TYPE_TAB = \\'tab\\'\\nELEM_TYPE_TAB_GROUP = \\'tabgroup\\'\\nELEM_TYPE_INPUT_SLIDER = \\'slider\\'\\nELEM_TYPE_INPUT_LISTBOX = \\'listbox\\'\\nELEM_TYPE_OUTPUT = \\'output\\'\\nELEM_TYPE_COLUMN = \\'column\\'\\nELEM_TYPE_MENUBAR = \\'menubar\\'\\nELEM_TYPE_PROGRESS_BAR = \\'progressbar\\'\\nELEM_TYPE_BLANK = \\'blank\\'\\nELEM_TYPE_TABLE = \\'table\\'\\nELEM_TYPE_TREE = \\'tree\\'\\nELEM_TYPE_ERROR = \\'error\\'\\nELEM_TYPE_SEPARATOR = \\'separator\\'\\nELEM_TYPE_STATUSBAR = \\'statusbar\\'\\nELEM_TYPE_PANE = \\'pane\\'\\nELEM_TYPE_BUTTONMENU = \\'buttonmenu\\'\\nELEM_TYPE_TITLEBAR = \\'titlebar\\'\\nELEM_TYPE_SIZEGRIP = \\'sizegrip\\'\\n\\n# STRETCH == ERROR ELEMENT as a filler\\n\\n# -------------------------  Popup Buttons Types  ------------------------- #\\nPOPUP_BUTTONS_YES_NO = 1\\nPOPUP_BUTTONS_CANCELLED = 2\\nPOPUP_BUTTONS_ERROR = 3\\nPOPUP_BUTTONS_OK_CANCEL = 4\\nPOPUP_BUTTONS_OK = 0\\nPOPUP_BUTTONS_NO_BUTTONS = 5\\n\\nPSG_THEME_PART_BUTTON_TEXT = \\'Button Text Color\\'\\nPSG_THEME_PART_BUTTON_BACKGROUND = \\'Button Background Color\\'\\nPSG_THEME_PART_BACKGROUND = \\'Background Color\\'\\nPSG_THEME_PART_INPUT_BACKGROUND = \\'Input Element Background Color\\'\\nPSG_THEME_PART_INPUT_TEXT = \\'Input Element Text Color\\'\\nPSG_THEME_PART_TEXT = \\'Text Color\\'\\nPSG_THEME_PART_SLIDER = \\'Slider Color\\'\\nPSG_THEME_PART_LIST = [PSG_THEME_PART_BACKGROUND, PSG_THEME_PART_BUTTON_BACKGROUND, PSG_THEME_PART_BUTTON_TEXT, PSG_THEME_PART_INPUT_BACKGROUND, PSG_THEME_PART_INPUT_TEXT,\\n                       PSG_THEME_PART_TEXT, PSG_THEME_PART_SLIDER]\\n\\n# theme_button\\n\\nTTK_SCROLLBAR_PART_TROUGH_COLOR = \\'Trough Color\\'\\nTTK_SCROLLBAR_PART_BACKGROUND_COLOR = \\'Background Color\\'\\nTTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR = \\'Arrow Button Arrow Color\\'\\nTTK_SCROLLBAR_PART_FRAME_COLOR = \\'Frame Color\\'\\nTTK_SCROLLBAR_PART_SCROLL_WIDTH = \\'Frame Width\\'\\nTTK_SCROLLBAR_PART_ARROW_WIDTH = \\'Arrow Width\\'\\nTTK_SCROLLBAR_PART_RELIEF = \\'Relief\\'\\nTTK_SCROLLBAR_PART_LIST = [TTK_SCROLLBAR_PART_TROUGH_COLOR, TTK_SCROLLBAR_PART_BACKGROUND_COLOR, TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR,\\n                           TTK_SCROLLBAR_PART_FRAME_COLOR, TTK_SCROLLBAR_PART_SCROLL_WIDTH, TTK_SCROLLBAR_PART_ARROW_WIDTH, TTK_SCROLLBAR_PART_RELIEF]\\nTTK_SCROLLBAR_PART_THEME_BASED_LIST = [TTK_SCROLLBAR_PART_TROUGH_COLOR, TTK_SCROLLBAR_PART_BACKGROUND_COLOR, TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR,\\n                                       TTK_SCROLLBAR_PART_FRAME_COLOR]\\nDEFAULT_TTK_PART_MAPPING_DICT = {TTK_SCROLLBAR_PART_TROUGH_COLOR: PSG_THEME_PART_SLIDER,\\n                                 TTK_SCROLLBAR_PART_BACKGROUND_COLOR: PSG_THEME_PART_BUTTON_BACKGROUND,\\n                                 TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR: PSG_THEME_PART_BUTTON_TEXT,\\n                                 TTK_SCROLLBAR_PART_FRAME_COLOR: PSG_THEME_PART_BACKGROUND,\\n                                 TTK_SCROLLBAR_PART_SCROLL_WIDTH: 12,\\n                                 TTK_SCROLLBAR_PART_ARROW_WIDTH: 12,\\n                                 TTK_SCROLLBAR_PART_RELIEF: RELIEF_RAISED}\\n\\nttk_part_mapping_dict = copy.copy(DEFAULT_TTK_PART_MAPPING_DICT)\\n\\n\\n\\n# -------------------------  Web Destinations  ------------------------- #\\nvar_ii0T3e = r\\'https://signup.PySimpleGUI.com\\'\\nvar_eMXjTuU6 = r\\'http://privacy.PySimpleGUI.com\\'\\nvar_SmkPJ9 = r\\'http://terms.PySimpleGUI.com\\'\\nvar_yjyGP1bi = r\\'http://license.PySimpleGUI.com\\'\\nURL_HOME = r\\'http://home.PySimpleGUI.com\\'\\nURL_DOCS = r\\'http://docs.PySimpleGUI.com\\'\\n\\n\\nclass TTKPartOverrides():\\n    \"\"\"\\n    This class contains \"overrides\" to the defaults for ttk scrollbars that are defined in the global settings file.\\n    This class is used in every element, in the Window class and there\\'s a global one that is used by set_options.\\n    \"\"\"\\n\\n    def __init__(self, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None):\\n        self.sbar_trough_color = sbar_trough_color\\n        self.sbar_background_color = sbar_background_color\\n        self.sbar_arrow_color = sbar_arrow_color\\n        self.sbar_width = sbar_width\\n        self.sbar_arrow_width = sbar_arrow_width\\n        self.sbar_frame_color = sbar_frame_color\\n        self.sbar_relief = sbar_relief\\n\\n\\nttk_part_overrides_from_options = TTKPartOverrides()\\n\\n# -------------------------  tkinter BASIC cursors... there are some OS dependent ones too  ------------------------- #\\nTKINTER_CURSORS = [\\'X_cursor\\', \\'arrow\\', \\'based_arrow_down\\', \\'based_arrow_up\\', \\'boat\\',\\n                   \\'bogosity\\', \\'bottom_left_corner\\', \\'bottom_right_corner\\', \\'bottom_side\\',\\n                   \\'bottom_tee\\', \\'box_spiral\\', \\'center_ptr\\', \\'circle\\', \\'clock\\',\\n                   \\'coffee_mug\\', \\'cross\\', \\'cross_reverse\\', \\'crosshair\\', \\'diamond_cross\\',\\n                   \\'dot\\', \\'dotbox\\', \\'double_arrow\\', \\'draft_large\\', \\'draft_small\\', \\'draped_box\\',\\n                   \\'exchange\\', \\'fleur\\', \\'gobbler\\', \\'gumby\\', \\'hand1\\', \\'hand2\\', \\'heart\\',\\n                   \\'icon\\', \\'iron_cross\\', \\'left_ptr\\', \\'left_side\\', \\'left_tee\\', \\'leftbutton\\',\\n                   \\'ll_angle\\', \\'lr_angle\\', \\'man\\', \\'middlebutton\\', \\'mouse\\', \\'pencil\\', \\'pirate\\',\\n                   \\'plus\\', \\'question_arrow\\', \\'right_ptr\\', \\'right_side\\', \\'right_tee\\',\\n                   \\'rightbutton\\', \\'rtl_logo\\', \\'sailboat\\', \\'sb_down_arrow\\', \\'sb_h_double_arrow\\',\\n                   \\'sb_left_arrow\\', \\'sb_right_arrow\\', \\'sb_up_arrow\\', \\'sb_v_double_arrow\\',\\n                   \\'shuttle\\', \\'sizing\\', \\'spider\\', \\'spraycan\\', \\'star\\', \\'target\\', \\'tcross\\',\\n                   \\'top_left_arrow\\', \\'top_left_corner\\', \\'top_right_corner\\', \\'top_side\\', \\'top_tee\\',\\n                   \\'trek\\', \\'ul_angle\\', \\'umbrella\\', \\'ur_angle\\', \\'watch\\', \\'xterm\\']\\n\\n# -------------------------  tkinter key codes for bindings  ------------------------- #\\n\\n# The keycode that when pressed will take a snapshot of the current window\\nDEFAULT_WINDOW_SNAPSHOT_KEY_CODE = None\\nDEFAULT_WINDOW_SNAPSHOT_KEY = \\'--SCREENSHOT THIS WINDOW--\\'\\n\\ntkinter_keysyms = (\\n\\'space\\', \\'exclam\\', \\'quotedbl\\', \\'numbersign\\', \\'dollar\\', \\'percent\\', \\'ampersand\\', \\'quoteright\\', \\'parenleft\\', \\'parenright\\', \\'asterisk\\', \\'plus\\', \\'comma\\', \\'minus\\', \\'period\\', \\'slash\\',\\n\\'0\\', \\'1\\', \\'2\\', \\'3\\', \\'4\\', \\'5\\', \\'6\\', \\'7\\', \\'8\\', \\'9\\', \\'colon\\', \\'semicolon\\', \\'less\\', \\'equal\\', \\'greater\\', \\'question\\', \\'at\\', \\'A\\', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\', \\'G\\', \\'H\\', \\'I\\', \\'J\\', \\'K\\', \\'L\\',\\n\\'M\\', \\'N\\', \\'O\\', \\'P\\', \\'Q\\', \\'R\\', \\'S\\', \\'T\\', \\'U\\', \\'V\\', \\'W\\', \\'X\\', \\'Y\\', \\'Z\\', \\'bracketleft\\', \\'backslash\\', \\'bracketright\\', \\'asciicircum\\', \\'underscore\\', \\'quoteleft\\', \\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\',\\n\\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\', \\'n\\', \\'o\\', \\'p\\', \\'q\\', \\'r\\', \\'s\\', \\'t\\', \\'u\\', \\'v\\', \\'w\\', \\'x\\', \\'y\\', \\'z\\', \\'braceleft\\', \\'bar\\', \\'braceright\\', \\'asciitilde\\', \\'nobreakspace\\',\\n\\'exclamdown\\', \\'cent\\', \\'sterling\\', \\'currency\\', \\'yen\\', \\'brokenbar\\', \\'section\\', \\'diaeresis\\', \\'copyright\\', \\'ordfeminine\\', \\'guillemotleft\\', \\'notsign\\', \\'hyphen\\', \\'registered\\', \\'macron\\',\\n\\'degree\\', \\'plusminus\\', \\'twosuperior\\', \\'threesuperior\\', \\'acute\\', \\'mu\\', \\'paragraph\\', \\'periodcentered\\', \\'cedilla\\', \\'onesuperior\\', \\'masculine\\', \\'guillemotright\\', \\'onequarter\\',\\n\\'onehalf\\', \\'threequarters\\', \\'questiondown\\', \\'Agrave\\', \\'Aacute\\', \\'Acircumflex\\', \\'Atilde\\', \\'Adiaeresis\\', \\'Aring\\', \\'AE\\', \\'Ccedilla\\', \\'Egrave\\', \\'Eacute\\', \\'Ecircumflex\\', \\'Ediaeresis\\',\\n\\'Igrave\\', \\'Iacute\\', \\'Icircumflex\\', \\'Idiaeresis\\', \\'Eth\\', \\'Ntilde\\', \\'Ograve\\', \\'Oacute\\', \\'Ocircumflex\\', \\'Otilde\\', \\'Odiaeresis\\', \\'multiply\\', \\'Ooblique\\', \\'Ugrave\\', \\'Uacute\\',\\n\\'Ucircumflex\\', \\'Udiaeresis\\', \\'Yacute\\', \\'Thorn\\', \\'ssharp\\', \\'agrave\\', \\'aacute\\', \\'acircumflex\\', \\'atilde\\', \\'adiaeresis\\', \\'aring\\', \\'ae\\', \\'ccedilla\\', \\'egrave\\', \\'eacute\\', \\'ecircumflex\\',\\n\\'ediaeresis\\', \\'igrave\\', \\'iacute\\', \\'icircumflex\\', \\'idiaeresis\\', \\'eth\\', \\'ntilde\\', \\'ograve\\', \\'oacute\\', \\'ocircumflex\\', \\'otilde\\', \\'odiaeresis\\', \\'division\\', \\'oslash\\', \\'ugrave\\', \\'uacute\\',\\n\\'ucircumflex\\', \\'udiaeresis\\', \\'yacute\\', \\'thorn\\', \\'ydiaeresis\\', \\'Aogonek\\', \\'breve\\', \\'Lstroke\\', \\'Lcaron\\', \\'Sacute\\', \\'Scaron\\', \\'Scedilla\\', \\'Tcaron\\', \\'Zacute\\', \\'Zcaron\\', \\'Zabovedot\\',\\n\\'aogonek\\', \\'ogonek\\', \\'lstroke\\', \\'lcaron\\', \\'sacute\\', \\'caron\\', \\'scaron\\', \\'scedilla\\', \\'tcaron\\', \\'zacute\\', \\'doubleacute\\', \\'zcaron\\', \\'zabovedot\\', \\'Racute\\', \\'Abreve\\', \\'Cacute\\', \\'Ccaron\\',\\n\\'Eogonek\\', \\'Ecaron\\', \\'Dcaron\\', \\'Nacute\\', \\'Ncaron\\', \\'Odoubleacute\\', \\'Rcaron\\', \\'Uring\\', \\'Udoubleacute\\', \\'Tcedilla\\', \\'racute\\', \\'abreve\\', \\'cacute\\', \\'ccaron\\', \\'eogonek\\', \\'ecaron\\',\\n\\'dcaron\\', \\'nacute\\', \\'ncaron\\', \\'odoubleacute\\', \\'rcaron\\', \\'uring\\', \\'udoubleacute\\', \\'tcedilla\\', \\'abovedot\\',\\n\\'leftradical\\', \\'topleftradical\\', \\'horizconnector\\', \\'topintegral\\', \\'botintegral\\', \\'vertconnector\\', \\'topleftsqbracket\\', \\'botleftsqbracket\\', \\'toprightsqbracket\\', \\'botrightsqbracket\\',\\n\\'topleftparens\\', \\'botleftparens\\', \\'toprightparens\\', \\'botrightparens\\', \\'leftmiddlecurlybrace\\', \\'rightmiddlecurlybrace\\', \\'topleftsummation\\', \\'botleftsummation\\',\\n\\'topvertsummationconnector\\', \\'botvertsummationconnector\\', \\'toprightsummation\\', \\'botrightsummation\\', \\'rightmiddlesummation\\', \\'lessthanequal\\', \\'notequal\\', \\'greaterthanequal\\',\\n\\'integral\\', \\'therefore\\', \\'variation\\', \\'infinity\\', \\'nabla\\', \\'approximate\\', \\'similarequal\\', \\'ifonlyif\\', \\'implies\\', \\'identical\\', \\'radical\\', \\'includedin\\', \\'includes\\', \\'intersection\\',\\n\\'union\\', \\'logicaland\\', \\'logicalor\\', \\'partialderivative\\', \\'function\\', \\'leftarrow\\', \\'uparrow\\', \\'rightarrow\\', \\'downarrow\\', \\'blank\\', \\'soliddiamond\\', \\'checkerboard\\', \\'ht\\', \\'ff\\', \\'cr\\',\\n\\'lf\\', \\'nl\\', \\'vt\\', \\'lowrightcorner\\', \\'uprightcorner\\', \\'upleftcorner\\', \\'lowleftcorner\\', \\'crossinglines\\', \\'horizlinescan1\\', \\'horizlinescan3\\', \\'horizlinescan5\\', \\'horizlinescan7\\',\\n\\'horizlinescan9\\', \\'leftt\\', \\'rightt\\', \\'bott\\', \\'topt\\', \\'vertbar\\', \\'emspace\\', \\'enspace\\', \\'em3space\\', \\'em4space\\', \\'digitspace\\', \\'punctspace\\', \\'thinspace\\', \\'hairspace\\', \\'emdash\\',\\n\\'endash\\', \\'signifblank\\', \\'ellipsis\\', \\'doubbaselinedot\\', \\'onethird\\', \\'twothirds\\', \\'onefifth\\', \\'twofifths\\', \\'threefifths\\', \\'fourfifths\\', \\'onesixth\\', \\'fivesixths\\', \\'careof\\',\\n\\'figdash\\', \\'leftanglebracket\\', \\'decimalpoint\\', \\'rightanglebracket\\', \\'marker\\', \\'oneeighth\\', \\'threeeighths\\', \\'fiveeighths\\', \\'seveneighths\\', \\'trademark\\', \\'signaturemark\\',\\n\\'trademarkincircle\\', \\'leftopentriangle\\', \\'rightopentriangle\\', \\'emopencircle\\', \\'emopenrectangle\\', \\'leftsinglequotemark\\', \\'rightsinglequotemark\\', \\'leftdoublequotemark\\',\\n\\'rightdoublequotemark\\', \\'prescription\\', \\'minutes\\', \\'seconds\\', \\'latincross\\', \\'hexagram\\', \\'filledrectbullet\\', \\'filledlefttribullet\\', \\'filledrighttribullet\\', \\'emfilledcircle\\',\\n\\'emfilledrect\\', \\'enopencircbullet\\', \\'enopensquarebullet\\', \\'openrectbullet\\', \\'opentribulletup\\', \\'opentribulletdown\\', \\'openstar\\', \\'enfilledcircbullet\\', \\'enfilledsqbullet\\',\\n\\'filledtribulletup\\', \\'filledtribulletdown\\', \\'leftpointer\\', \\'rightpointer\\', \\'club\\', \\'diamond\\', \\'heart\\', \\'maltesecross\\', \\'dagger\\', \\'doubledagger\\', \\'checkmark\\', \\'ballotcross\\',\\n\\'musicalsharp\\', \\'musicalflat\\', \\'malesymbol\\', \\'femalesymbol\\', \\'telephone\\', \\'telephonerecorder\\', \\'phonographcopyright\\', \\'caret\\', \\'singlelowquotemark\\', \\'doublelowquotemark\\', \\'cursor\\',\\n\\'leftcaret\\', \\'rightcaret\\', \\'downcaret\\', \\'upcaret\\', \\'overbar\\', \\'downtack\\', \\'upshoe\\', \\'downstile\\', \\'underbar\\', \\'jot\\', \\'quad\\', \\'uptack\\', \\'circle\\', \\'upstile\\', \\'downshoe\\', \\'rightshoe\\',\\n\\'leftshoe\\', \\'lefttack\\', \\'righttack\\', \\'BackSpace\\', \\'Tab\\', \\'Linefeed\\', \\'Clear\\', \\'Return\\', \\'Pause\\', \\'Scroll_Lock\\',\\n\\'Sys_Req\\', \\'Escape\\', \\'Multi_key\\', \\'Kanji\\', \\'Home\\', \\'Left\\', \\'Up\\', \\'Right\\', \\'Down\\', \\'Prior\\', \\'Next\\', \\'End\\', \\'Begin\\', \\'Win_L\\', \\'Win_R\\', \\'App\\', \\'Select\\', \\'Print\\', \\'Execute\\', \\'Insert\\',\\n\\'Undo\\', \\'Redo\\', \\'Menu\\', \\'Find\\', \\'Cancel\\', \\'Help\\', \\'Break\\', \\'Hebrew_switch\\', \\'Num_Lock\\', \\'KP_Space\\', \\'KP_Tab\\', \\'KP_Enter\\', \\'KP_F1\\', \\'KP_F2\\', \\'KP_F3\\', \\'KP_F4\\', \\'KP_Multiply\\',\\n\\'KP_Add\\', \\'KP_Separator\\', \\'KP_Subtract\\', \\'KP_Decimal\\', \\'KP_Divide\\', \\'KP_0\\', \\'KP_1\\', \\'KP_2\\', \\'KP_3\\', \\'KP_4\\', \\'KP_5\\', \\'KP_6\\', \\'KP_7\\', \\'KP_8\\', \\'KP_9\\', \\'KP_Equal\\', \\'F1\\', \\'F2\\', \\'F3\\',\\n\\'F4\\', \\'F5\\', \\'F6\\', \\'F7\\', \\'F8\\', \\'F9\\', \\'F10\\', \\'F11\\', \\'F12\\', \\'L1\\', \\'L2\\', \\'L3\\', \\'L4\\', \\'L5\\', \\'L6\\', \\'L7\\', \\'L8\\', \\'L9\\', \\'L10\\', \\'R1\\', \\'R2\\', \\'R3\\', \\'R4\\', \\'R5\\', \\'R6\\', \\'R7\\', \\'R8\\', \\'R9\\', \\'R10\\',\\n\\'R11\\', \\'R12\\', \\'F33\\', \\'R14\\', \\'R15\\', \\'Shift_L\\', \\'Shift_R\\', \\'Control_L\\', \\'Control_R\\', \\'Caps_Lock\\', \\'Shift_Lock\\', \\'Meta_L\\', \\'Meta_R\\', \\'Alt_L\\', \\'Alt_R\\', \\'Super_L\\', \\'Super_R\\', \\'Hyper_L\\',\\n\\'Hyper_R\\', \\'Delete\\')\\n\\n\\n# ------------------------------------------------------------------------- #\\n#                       ToolTip used by the Elements                        #\\n# ------------------------------------------------------------------------- #\\n\\nclass ToolTip:\\n    \"\"\"\\n    Create a tooltip for a given widget\\n    (inspired by https://stackoverflow.com/a/36221216)\\n    This is an INTERNALLY USED only class.  Users should not refer to this class at all.\\n    \"\"\"\\n\\n    def __init__(self, widget, text, timeout=DEFAULT_TOOLTIP_TIME):\\n        \"\"\"\\n        :param widget:  The tkinter widget\\n        :type widget:   widget type varies\\n        :param text:    text for the tooltip. It can inslude \\\\n. If None tip won\\'t be shown\\n        :type text:     str | None\\n        :param timeout: Time in milliseconds that mouse must remain still before tip is shown\\n        :type timeout:  (int)\\n        \"\"\"\\n        self.widget = widget\\n        self.text = text            # Set to None and tooltip will be not shown\\n        self.timeout = timeout\\n        # self.wraplength = wraplength if wraplength else widget.winfo_screenwidth() // 2\\n        self.tipwindow = None\\n        self.id = None\\n        self.x = self.y = 0\\n        self.widget.bind(\"<Enter>\", self.enter)\\n        self.widget.bind(\"<Leave>\", self.leave)\\n        self.widget.bind(\"<ButtonPress>\", self.leave)\\n\\n    def enter(self, event=None):\\n        \"\"\"\\n        Called by tkinter when mouse enters a widget\\n        :param event: from tkinter.  Has x,y coordinates of mouse\\n        :type event:\\n\\n        \"\"\"\\n        if self.text is None:       # if tip is diabled\\n            return\\n        self.x = event.x\\n        self.y = event.y\\n        self.schedule()\\n\\n    def leave(self, event=None):\\n        \"\"\"\\n        Called by tktiner when mouse exits a widget\\n        :param event: from tkinter.  Event info that\\'s not used by function.\\n        :type event:\\n\\n        \"\"\"\\n        self.unschedule()\\n        self.hidetip()\\n\\n    def schedule(self):\\n        \"\"\"\\n        Schedule a timer to time how long mouse is hovering\\n        \"\"\"\\n        self.unschedule()\\n        self.id = self.widget.after(self.timeout, self.showtip)\\n\\n    def unschedule(self):\\n        \"\"\"\\n        Cancel timer used to time mouse hover\\n        \"\"\"\\n        if self.id:\\n            self.widget.after_cancel(self.id)\\n        self.id = None\\n\\n    def showtip(self):\\n        \"\"\"\\n        Creates a topoltip window with the tooltip text inside of it\\n        \"\"\"\\n        if self.tipwindow:\\n            return\\n        x = self.widget.winfo_rootx() + self.x + DEFAULT_TOOLTIP_OFFSET[0]\\n        y = self.widget.winfo_rooty() + self.y + DEFAULT_TOOLTIP_OFFSET[1]\\n        self.tipwindow = tk.Toplevel(self.widget)\\n        # if not sys.platform.startswith(\\'darwin\\'):\\n        try:\\n            self.tipwindow.wm_overrideredirect(True)\\n            # if running_mac() and ENABLE_MAC_NOTITLEBAR_PATCH:\\n            if _mac_should_apply_notitlebar_patch():\\n                self.tipwindow.wm_overrideredirect(False)\\n        except Exception as e:\\n            print(\\'* Error performing wm_overrideredirect in showtip *\\', e)\\n        self.tipwindow.wm_geometry(\"+%d+%d\" % (x, y))\\n        self.tipwindow.wm_attributes(\"-topmost\", 1)\\n\\n        label = ttk.Label(self.tipwindow, text=self.text, justify=tk.LEFT,\\n                          background=TOOLTIP_BACKGROUND_COLOR, relief=tk.SOLID, borderwidth=1)\\n        if TOOLTIP_FONT is not None:\\n            label.config(font=TOOLTIP_FONT)\\n        label.pack()\\n\\n    def hidetip(self):\\n        \"\"\"\\n        Destroy the tooltip window\\n        \"\"\"\\n        if self.tipwindow:\\n            self.tipwindow.destroy()\\n        self.tipwindow = None\\n\\n    def remove(self):\\n        \"\"\"\\n        Removes a tooltip from a widget\\n        \"\"\"\\n        self.text = None\\n\\n# ---------------------------------------------------------------------- #\\n# Cascading structure.... Objects get larger                             #\\n#   Button                                                               #\\n#       Element                                                          #\\n#           Row                                                          #\\n#               Form                                                     #\\n# ---------------------------------------------------------------------- #\\n# ------------------------------------------------------------------------- #\\n#                       Element CLASS                                       #\\n# ------------------------------------------------------------------------- #\\nclass Element():\\n    \"\"\" The base class for all Elements. Holds the basic description of an Element like size and colors \"\"\"\\n\\n    def __init__(self, type, size=(None, None), auto_size_text=None, font=None, background_color=None, text_color=None, key=None, pad=None, tooltip=None,\\n                 visible=True, metadata=None, sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None):\\n        \"\"\"\\n        Element base class. Only used internally.  User will not create an Element object by itself\\n\\n        :param type:                        The type of element. These constants all start with \"ELEM_TYPE_\"\\n        :type type:                         (int) (could be enum)\\n        :param size:                        w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1\\n        :type size:                         (int, int) | (None, None) | int\\n        :param auto_size_text:              True if the Widget should be shrunk to exactly fit the number of chars to show\\n        :type auto_size_text:               bool\\n        :param font:                        specifies the font family, size. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:                         (str or (str, int[, str]) or None)\\n        :param background_color:            color of background. Can be in #RRGGBB format or a color name \"black\"\\n        :type background_color:             (str)\\n        :param text_color:                  element\\'s text color. Can be in #RRGGBB format or a color name \"black\"\\n        :type text_color:                   (str)\\n        :param key:                         Identifies an Element. Should be UNIQUE to this window.\\n        :type key:                          str | int | tuple | object\\n        :param pad:                         Amount of padding to put around element in pixels (left/right, top/bottom). If an int is given, then auto-converted to tuple (int, int)\\n        :type pad:                          (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param tooltip:                     text, that will appear when mouse hovers over the element\\n        :type tooltip:                      (str)\\n        :param visible:                     set visibility state of the element (Default = True)\\n        :type visible:                      (bool)\\n        :param metadata:                    User metadata that can be set to ANYTHING\\n        :type metadata:                     (Any)\\n        :param sbar_trough_color:           Scrollbar color of the trough\\n        :type sbar_trough_color:            (str)\\n        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the \"thumb\" (the thing you grab and slide). Switches to arrow color when mouse is over\\n        :type sbar_background_color:        (str)\\n        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over\\n        :type sbar_arrow_color:             (str)\\n        :param sbar_width:                  Scrollbar width in pixels\\n        :type sbar_width:                   (int)\\n        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar\\n        :type sbar_arrow_width:             (int)\\n        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)\\n        :type sbar_frame_color:             (str)\\n        :param sbar_relief:                 Scrollbar relief that will be used for the \"thumb\" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with \"RELIEF_\" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID\\n        :type sbar_relief:                  (str)\\n        \"\"\"\\n\\n        if size is not None and size != (None, None):\\n            if isinstance(size, int):\\n                size = (size, 1)\\n            if isinstance(size, tuple) and len(size) == 1:\\n                size = (size[0], 1)\\n\\n        if pad is not None and pad != (None, None):\\n            if isinstance(pad, int):\\n                pad = (pad, pad)\\n\\n        self.Size = size\\n        self.Type = type\\n        self.AutoSizeText = auto_size_text\\n\\n        self.Pad = pad\\n        self.Font = font\\n\\n        self.TKStringVar = None\\n        self.TKIntVar = None\\n        self.TKText = None\\n        self.TKEntry = None\\n        self.TKImage = None\\n        self.ttk_style_name = \\'\\'  # The ttk style name (if this is a ttk widget)\\n        self.ttk_style = None  # The ttk Style object (if this is a ttk widget)\\n        self._metadata = None  # type: Any\\n        if not hasattr(self, \\'setting\\'):\\n            self.setting = None       # If no setting has been set yet, set it to None\\n        self.ParentForm = None  # type: Window\\n        self.ParentContainer = None  # will be a Form, Column, or Frame element # UNBIND\\n        self.TextInputDefault = None\\n        self.Position = (0, 0)  # Default position Row 0, Col 0\\n        self.BackgroundColor = background_color if background_color is not None else DEFAULT_ELEMENT_BACKGROUND_COLOR\\n        self.TextColor = text_color if text_color is not None else DEFAULT_ELEMENT_TEXT_COLOR\\n        self.Key = key  # dictionary key for return values\\n        self.Tooltip = tooltip\\n        self.TooltipObject = None       # type: ToolTip\\n        self._visible = visible\\n        self.TKRightClickMenu = None\\n        self.Widget = None  # Set when creating window. Has the main tkinter widget for element\\n        self.Tearoff = False  # needed because of right click menu code\\n        self.ParentRowFrame = None  # type tk.Frame\\n        self.metadata = metadata\\n        self.user_bind_dict = {}  # Used when user defines a tkinter binding using bind method - convert bind string to key modifier\\n        self.user_bind_event = None  # Used when user defines a tkinter binding using bind method - event data from tkinter\\n        # self.pad_used = (0, 0)  # the amount of pad used when was inserted into the layout\\n        self._popup_menu_location = (None, None)\\n        self.pack_settings = None\\n        self.vsb_style_name = None  # ttk style name used for the verical scrollbar if one is attached to element\\n        self.hsb_style_name = None  # ttk style name used for the horizontal scrollbar if one is attached to element\\n        self.vsb_style = None  # The ttk style used for the vertical scrollbar if one is attached to element\\n        self.hsb_style = None  # The ttk style used for the horizontal scrollbar if one is attached to element\\n        self.hsb = None  # The horizontal scrollbar if one is attached to element\\n        self.vsb = None  # The vertical scrollbar if one is attached to element\\n        ## TTK Scrollbar Settings\\n        self.ttk_part_overrides = TTKPartOverrides(sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color,\\n                                                   sbar_width=sbar_width, sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)\\n\\n        PSG_THEME_PART_FUNC_MAP = {PSG_THEME_PART_BACKGROUND: theme_background_color,\\n                                   PSG_THEME_PART_BUTTON_BACKGROUND: theme_button_color_background,\\n                                   PSG_THEME_PART_BUTTON_TEXT: theme_button_color_text,\\n                                   PSG_THEME_PART_INPUT_BACKGROUND: theme_input_background_color,\\n                                   PSG_THEME_PART_INPUT_TEXT: theme_input_text_color,\\n                                   PSG_THEME_PART_TEXT: theme_text_color,\\n                                   PSG_THEME_PART_SLIDER: theme_slider_color}\\n\\n        # class Theme_Parts():\\n        #     PSG_THEME_PART_FUNC_MAP = {PSG_THEME_PART_BACKGROUND: theme_background_color,\\n        if sbar_trough_color is not None:\\n            self.scroll_trough_color = sbar_trough_color\\n        else:\\n            self.scroll_trough_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_TROUGH_COLOR], ttk_part_mapping_dict[TTK_SCROLLBAR_PART_TROUGH_COLOR])\\n            if callable(self.scroll_trough_color):\\n                self.scroll_trough_color = self.scroll_trough_color()\\n\\n        if sbar_background_color is not None:\\n            self.scroll_background_color = sbar_background_color\\n        else:\\n            self.scroll_background_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_BACKGROUND_COLOR],\\n                                                                       ttk_part_mapping_dict[TTK_SCROLLBAR_PART_BACKGROUND_COLOR])\\n            if callable(self.scroll_background_color):\\n                self.scroll_background_color = self.scroll_background_color()\\n\\n        if sbar_arrow_color is not None:\\n            self.scroll_arrow_color = sbar_arrow_color\\n        else:\\n            self.scroll_arrow_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR],\\n                                                                  ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_BUTTON_ARROW_COLOR])\\n            if callable(self.scroll_arrow_color):\\n                self.scroll_arrow_color = self.scroll_arrow_color()\\n\\n        if sbar_frame_color is not None:\\n            self.scroll_frame_color = sbar_frame_color\\n        else:\\n            self.scroll_frame_color = PSG_THEME_PART_FUNC_MAP.get(ttk_part_mapping_dict[TTK_SCROLLBAR_PART_FRAME_COLOR], ttk_part_mapping_dict[TTK_SCROLLBAR_PART_FRAME_COLOR])\\n            if callable(self.scroll_frame_color):\\n                self.scroll_frame_color = self.scroll_frame_color()\\n\\n        if sbar_relief is not None:\\n            self.scroll_relief = sbar_relief\\n        else:\\n            self.scroll_relief = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_RELIEF]\\n\\n        if sbar_width is not None:\\n            self.scroll_width = sbar_width\\n        else:\\n            self.scroll_width = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_SCROLL_WIDTH]\\n\\n        if sbar_arrow_width is not None:\\n            self.scroll_arrow_width = sbar_arrow_width\\n        else:\\n            self.scroll_arrow_width = ttk_part_mapping_dict[TTK_SCROLLBAR_PART_ARROW_WIDTH]\\n\\n        if not hasattr(self, \\'DisabledTextColor\\'):\\n            self.DisabledTextColor = None\\n        if not hasattr(self, \\'ItemFont\\'):\\n            self.ItemFont = None\\n        if not hasattr(self, \\'RightClickMenu\\'):\\n            self.RightClickMenu = None\\n        if not hasattr(self, \\'Disabled\\'):\\n            self.Disabled = None  # in case the element hasn\\'t defined this, add it here\\n\\n    @property\\n    def visible(self):\\n        \"\"\"\\n        Returns visibility state for the element.  This is a READONLY property\\n        :return: Visibility state for element\\n        :rtype:  (bool)\\n        \"\"\"\\n        return self._visible\\n\\n    @property\\n    def metadata(self):\\n        \"\"\"\\n        Metadata is an Element property that you can use at any time to hold any value\\n        :return: the current metadata value\\n        :rtype:  (Any)\\n        \"\"\"\\n        return self._metadata\\n\\n    @metadata.setter\\n    def metadata(self, value):\\n        \"\"\"\\n         Metadata is an Element property that you can use at any time to hold any value\\n        :param value: Anything you want it to be\\n        :type value:  (Any)\\n        \"\"\"\\n        self._metadata = value\\n\\n    @property\\n    def key(self):\\n        \"\"\"\\n        Returns key for the element.  This is a READONLY property.\\n        Keys can be any hashable object (basically anything except a list... tuples are ok, but not lists)\\n        :return: The window\\'s Key\\n        :rtype:  (Any)\\n        \"\"\"\\n        return self.Key\\n\\n    @property\\n    def widget(self):\\n        \"\"\"\\n        Returns tkinter widget for the element.  This is a READONLY property.\\n        The implementation is that the Widget member variable is returned. This is a backward compatible addition\\n        :return:    The element\\'s underlying tkinter widget\\n        :rtype:     (tkinter.Widget)\\n        \"\"\"\\n        return self.Widget\\n\\n    def _RightClickMenuCallback(self, event):\\n        \"\"\"\\n        Callback function that\\'s called when a right click happens. Shows right click menu as result\\n\\n        :param event: information provided by tkinter about the event including x,y location of click\\n        :type event:\\n\\n        \"\"\"\\n\\n        if self.Type == ELEM_TYPE_TAB_GROUP:\\n            try:\\n                index = self.Widget.index(\\'@{},{}\\'.format(event.x, event.y))\\n                tab = self.Widget.tab(index, \\'text\\')\\n                key = self.find_key_from_tab_name(tab)\\n                tab_element = self.ParentForm.key_dict[key]\\n                if tab_element.RightClickMenu is None:  # if this tab didn\\'t explicitly have a menu, then don\\'t show anything\\n                    return\\n                tab_element.TKRightClickMenu.tk_popup(event.x_root, event.y_root, 0)\\n                self.TKRightClickMenu.grab_release()\\n            except:\\n                pass\\n            return\\n        self.TKRightClickMenu.tk_popup(event.x_root, event.y_root, 0)\\n        self.TKRightClickMenu.grab_release()\\n        if self.Type == ELEM_TYPE_GRAPH:\\n            self._update_position_for_returned_values(event)\\n        self.ParentForm._right_click_menu_element = self\\n\\n    def _tearoff_menu_callback(self, parent, menu):\\n        \"\"\"\\n        Callback function that\\'s called when a right click menu is torn off.\\n        The reason for this function is to relocate the torn-off menu. It will default to 0,0 otherwise\\n        This callback moves the right click menu window to the location of the current window\\n\\n        :param parent: information provided by tkinter - the parent of the Meny\\n        :type parent:\\n        :param menu:   information provided by tkinter - the menu window\\n        :type menu:\\n\\n        \"\"\"\\n        if self._popup_menu_location == (None, None):\\n            winx, winy = self.ParentForm.current_location()\\n        else:\\n            winx, winy = self._popup_menu_location\\n        # self.ParentForm.TKroot.update()\\n        self.ParentForm.TKroot.tk.call(\\'wm\\', \\'geometry\\', menu, \"+{}+{}\".format(winx, winy))\\n\\n    def _MenuItemChosenCallback(self, item_chosen):  # TEXT Menu item callback\\n        \"\"\"\\n        Callback function called when user chooses a menu item from menubar, Button Menu or right click menu\\n\\n        :param item_chosen: String holding the value chosen.\\n        :type item_chosen:  str\\n\\n        \"\"\"\\n        # print(\\'IN MENU ITEM CALLBACK\\', item_chosen)\\n        self.MenuItemChosen = item_chosen\\n        self.ParentForm.LastButtonClicked = self.MenuItemChosen\\n        self.ParentForm.FormRemainedOpen = True\\n        _exit_mainloop(self.ParentForm)\\n        # Window._window_that_exited = self.ParentForm\\n        # self.ParentForm.TKroot.quit()  # kick the users out of the mainloop\\n\\n    def _FindReturnKeyBoundButton(self, form):\\n        \"\"\"\\n        Searches for which Button has the flag Button.BindReturnKey set.  It is called recursively when a\\n        \"Container Element\" is encountered. Func has to walk entire window including these \"sub-forms\"\\n\\n        :param form: the Window object to search\\n        :type form:\\n        :return:     Button Object if a button is found, else None\\n        :rtype:      Button | None\\n        \"\"\"\\n        for row in form.Rows:\\n            for element in row:\\n                if element.Type == ELEM_TYPE_BUTTON:\\n                    if element.BindReturnKey:\\n                        return element\\n                if element.Type == ELEM_TYPE_COLUMN:\\n                    rc = self._FindReturnKeyBoundButton(element)\\n                    if rc is not None:\\n                        return rc\\n                if element.Type == ELEM_TYPE_FRAME:\\n                    rc = self._FindReturnKeyBoundButton(element)\\n                    if rc is not None:\\n                        return rc\\n                if element.Type == ELEM_TYPE_TAB_GROUP:\\n                    rc = self._FindReturnKeyBoundButton(element)\\n                    if rc is not None:\\n                        return rc\\n                if element.Type == ELEM_TYPE_TAB:\\n                    rc = self._FindReturnKeyBoundButton(element)\\n                    if rc is not None:\\n                        return rc\\n                if element.Type == ELEM_TYPE_PANE:\\n                    rc = self._FindReturnKeyBoundButton(element)\\n                    if rc is not None:\\n                        return rc\\n        return None\\n\\n    def _TextClickedHandler(self, event):\\n        \"\"\"\\n        Callback that\\'s called when a text element is clicked on with events enabled on the Text Element.\\n        Result is that control is returned back to user (quits mainloop).\\n\\n        :param event:\\n        :type event:\\n\\n        \"\"\"\\n        # If this is a minimize button for a custom titlebar, then minimize the window\\n        if self.Key in (TITLEBAR_MINIMIZE_KEY, TITLEBAR_MAXIMIZE_KEY, TITLEBAR_CLOSE_KEY):\\n            self.ParentForm._custom_titlebar_callback(self.Key)\\n        elif self.Key == var_ooNJwi2O:\\n            webbrowser.open_new_tab(var_ii0T3e)\\n            return\\n        self._generic_callback_handler(self.DisplayText)\\n        return\\n\\n    def _ReturnKeyHandler(self, event):\\n        \"\"\"\\n        Internal callback for the ENTER / RETURN key. Results in calling the ButtonCallBack for element that has the return key bound to it, just as if button was clicked.\\n\\n        :param event:\\n        :type event:\\n\\n        \"\"\"\\n        # if the element is disabled, ignore the event\\n        if self.Disabled:\\n            return\\n\\n        MyForm = self.ParentForm\\n        button_element = self._FindReturnKeyBoundButton(MyForm)\\n        if button_element is not None:\\n            # if the Button has been disabled, then don\\'t perform the callback\\n            if button_element.Disabled:\\n                return\\n            button_element.ButtonCallBack()\\n\\n    def _generic_callback_handler(self, alternative_to_key=None, force_key_to_be=None):\\n        \"\"\"\\n        Peforms the actions that were in many of the callback functions previously.  Combined so that it\\'s\\n        easier to modify and is in 1 place now\\n\\n        :param event:            From tkinter and is not used\\n        :type event:             Any\\n        :param alternate_to_key: If key is None, then use this value instead\\n        :type alternate_to_key:  Any\\n        \"\"\"\\n        if force_key_to_be is not None:\\n            self.ParentForm.LastButtonClicked = force_key_to_be\\n        elif self.Key is not None:\\n            self.ParentForm.LastButtonClicked = self.Key\\n        else:\\n            self.ParentForm.LastButtonClicked = alternative_to_key\\n        self.ParentForm.FormRemainedOpen = True\\n\\n        _exit_mainloop(self.ParentForm)\\n        # if self.ParentForm.CurrentlyRunningMainloop:\\n        #     Window._window_that_exited = self.ParentForm\\n        #     self.ParentForm.TKroot.quit()  # kick the users out of the mainloop\\n\\n    def _ListboxSelectHandler(self, event):\\n        \"\"\"\\n        Internal callback function for when a listbox item is selected\\n\\n        :param event: Information from tkinter about the callback\\n        :type event:\\n\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _ComboboxSelectHandler(self, event):\\n        \"\"\"\\n        Internal callback function for when an entry is selected in a Combobox.\\n        :param event: Event data from tkinter (not used)\\n        :type event:\\n\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n\\n\\n    def _OptionMenuSelectHandler(self, var, index, mode):\\n        \"\"\"\\n        Internal callback function for when an entry is selected in a OptionMenu.\\n        :param var:     tkinter control variable\\n        :param index:   index of var, \\'\\' if var is not a list\\n        :param mode:    \\'w\\' for \\'write\\' here\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n\\n\\n\\n    def _SpinboxSelectHandler(self, event=None):\\n        \"\"\"\\n        Internal callback function for when an entry is selected in a Spinbox.\\n        Note that the parm is optional because it\\'s not used if arrows are used to change the value\\n        but if the return key is pressed, it will include the event parm\\n        :param event: Event data passed in by tkinter (not used)\\n        :type event:\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _RadioHandler(self):\\n        \"\"\"\\n        Internal callback for when a radio button is selected and enable events was set for radio\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _CheckboxHandler(self):\\n        \"\"\"\\n        Internal callback for when a checkbnox is selected and enable events was set for checkbox\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _TabGroupSelectHandler(self, event):\\n        \"\"\"\\n        Internal callback for when a Tab is selected and enable events was set for TabGroup\\n\\n        :param event: Event data passed in by tkinter (not used)\\n        :type event:\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _KeyboardHandler(self, event):\\n        \"\"\"\\n        Internal callback for when a key is pressed andd return keyboard events was set for window\\n\\n        :param event: Event data passed in by tkinter (not used)\\n        :type event:\\n        \"\"\"\\n\\n        # if the element is disabled, ignore the event\\n        if self.Disabled:\\n            return\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _ClickHandler(self, event):\\n        \"\"\"\\n        Internal callback for when a mouse was clicked... I think.\\n\\n        :param event: Event data passed in by tkinter (not used)\\n        :type event:\\n        \"\"\"\\n        self._generic_callback_handler(\\'\\')\\n\\n    def _this_elements_window_closed(self, quick_check=True):\\n        if self.ParentForm is not None:\\n            return self.ParentForm.is_closed(quick_check=quick_check)\\n\\n        return True\\n\\n    def _user_bind_callback(self, bind_string, event, propagate=True):\\n        \"\"\"\\n        Used when user binds a tkinter event directly to an element\\n\\n        :param bind_string: The event that was bound so can lookup the key modifier\\n        :type bind_string:  (str)\\n        :param event:       Event data passed in by tkinter (not used)\\n        :type event:        (Any)\\n        :param propagate:   If True then tkinter will be told to propagate the event to the element\\n        :type propagate:    (bool)\\n        \"\"\"\\n        key_suffix = self.user_bind_dict.get(bind_string, \\'\\')\\n        self.user_bind_event = event\\n        if self.Type == ELEM_TYPE_GRAPH:\\n            self._update_position_for_returned_values(event)\\n        if self.Key is not None:\\n            if isinstance(self.Key, str):\\n                key = self.Key + str(key_suffix)\\n            else:\\n                key = (self.Key, key_suffix)  # old way (pre 2021) was to make a brand new tuple\\n                # key = self.Key + (key_suffix,)   # in 2021 tried this. It will break existing applications though - if key is a tuple, add one more item\\n        else:\\n            key = bind_string\\n\\n        self._generic_callback_handler(force_key_to_be=key)\\n\\n        return \\'break\\' if propagate is not True else None\\n\\n    def bind(self, bind_string, key_modifier, propagate=True):\\n        \"\"\"\\n        Used to add tkinter events to an Element.\\n        The tkinter specific data is in the Element\\'s member variable user_bind_event\\n        :param bind_string:  The string tkinter expected in its bind function\\n        :type bind_string:   (str)\\n        :param key_modifier: Additional data to be added to the element\\'s key when event is returned\\n        :type key_modifier:  (str)\\n        :param propagate:    If True then tkinter will be told to propagate the event to the element\\n        :type propagate:     (bool)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        try:\\n            self.Widget.bind(bind_string, lambda evt: self._user_bind_callback(bind_string, evt, propagate))\\n        except Exception as e:\\n            self.Widget.unbind_all(bind_string)\\n            return\\n\\n        self.user_bind_dict[bind_string] = key_modifier\\n\\n    def unbind(self, bind_string):\\n        \"\"\"\\n        Removes a previously bound tkinter event from an Element.\\n        :param bind_string: The string tkinter expected in its bind function\\n        :type bind_string:  (str)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n        self.Widget.unbind(bind_string)\\n        self.user_bind_dict.pop(bind_string, None)\\n\\n    def set_tooltip(self, tooltip_text):\\n        \"\"\"\\n        Called by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element(\\'key\\').SetToolTip(\\'New tip\\').\\n\\n        :param tooltip_text: the text to show in tooltip.  If None then no tip will be shown\\n        :type tooltip_text:  str | None\\n        \"\"\"\\n\\n        if self.TooltipObject:\\n            try:\\n                self.TooltipObject.leave()\\n            except:\\n                pass\\n\\n        self.TooltipObject = ToolTip(self.Widget, text=tooltip_text, timeout=DEFAULT_TOOLTIP_TIME)\\n\\n\\n    def remove_tooltip(self):\\n        \"\"\"\\n        Removes a previiously created tooltip for an element\\n\\n        \"\"\"\\n\\n        if self.TooltipObject:\\n            try:\\n                self.TooltipObject.remove()\\n            except:\\n                pass\\n\\n\\n    def set_focus(self, force=False):\\n        \"\"\"\\n        Sets the current focus to be on this element\\n\\n        :param force: if True will call focus_force otherwise calls focus_set\\n        :type force:  bool\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n        try:\\n            if force:\\n                self.Widget.focus_force()\\n            else:\\n                self.Widget.focus_set()\\n        except Exception as e:\\n            _error_popup_with_traceback(\"Exception blocking focus. Check your element\\'s Widget\", e)\\n\\n    def block_focus(self, block=True):\\n        \"\"\"\\n        Enable or disable the element from getting focus by using the keyboard.\\n        If the block parameter is True, then this element will not be given focus by using\\n        the keyboard to go from one element to another.\\n        You CAN click on the element and utilize it.\\n\\n        :param block: if True the element will not get focus via the keyboard\\n        :type block:  bool\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n        try:\\n            self.ParentForm.TKroot.focus_force()\\n            if block:\\n                self.Widget.configure(takefocus=0)\\n            else:\\n                self.Widget.configure(takefocus=1)\\n        except Exception as e:\\n            _error_popup_with_traceback(\"Exception blocking focus. Check your element\\'s Widget\", e)\\n\\n    def get_next_focus(self):\\n        \"\"\"\\n        Gets the next element that should get focus after this element.\\n\\n        :return:    Element that will get focus after this one\\n        :rtype:     (Element)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return None\\n\\n        try:\\n            next_widget_focus = self.widget.tk_focusNext()\\n            return self.ParentForm.widget_to_element(next_widget_focus)\\n        except Exception as e:\\n            _error_popup_with_traceback(\"Exception getting next focus. Check your element\\'s Widget\", e)\\n\\n    def get_previous_focus(self):\\n        \"\"\"\\n        Gets the element that should get focus previous to this element.\\n\\n        :return:    Element that should get the focus before this one\\n        :rtype:     (Element)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return None\\n        try:\\n            next_widget_focus = self.widget.tk_focusPrev()  # tkinter.Widget\\n            return self.ParentForm.widget_to_element(next_widget_focus)\\n        except Exception as e:\\n            _error_popup_with_traceback(\"Exception getting previous focus. Check your element\\'s Widget\", e)\\n\\n    def set_size(self, size=(None, None)):\\n        \"\"\"\\n        Changes the size of an element to a specific size.\\n        It\\'s possible to specify None for one of sizes so that only 1 of the element\\'s dimensions are changed.\\n\\n        :param size: The size in characters, rows typically. In some cases they are pixels\\n        :type size:  (int, int)\\n        \"\"\"\\n        try:\\n            if size[0] != None:\\n                self.Widget.config(width=size[0])\\n        except:\\n            print(\\'Warning, error setting width on element with key=\\', self.Key)\\n        try:\\n            if size[1] != None:\\n                self.Widget.config(height=size[1])\\n        except:\\n            try:\\n                self.Widget.config(length=size[1])\\n            except:\\n                print(\\'Warning, error setting height on element with key=\\', self.Key)\\n\\n        if self.Type == ELEM_TYPE_GRAPH:\\n            self.CanvasSize = size\\n\\n    def get_size(self):\\n        \"\"\"\\n        Return the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\\n        :return: width and height of the element\\n        :rtype:  (int, int)\\n        \"\"\"\\n        try:\\n            w = self.Widget.winfo_width()\\n            h = self.Widget.winfo_height()\\n        except:\\n            print(\\'Warning, error getting size of element\\', self.Key)\\n            w = h = None\\n        return w, h\\n\\n    def hide_row(self):\\n        \"\"\"\\n        Hide the entire row an Element is located on.\\n        Use this if you must have all space removed when you are hiding an element, including the row container\\n        \"\"\"\\n        try:\\n            self.ParentRowFrame.pack_forget()\\n        except:\\n            print(\\'Warning, error hiding element row for key =\\', self.Key)\\n\\n    def unhide_row(self):\\n        \"\"\"\\n        Unhides (makes visible again) the row container that the Element is located on.\\n        Note that it will re-appear at the bottom of the window / container, most likely.\\n        \"\"\"\\n        try:\\n            self.ParentRowFrame.pack()\\n        except:\\n            print(\\'Warning, error hiding element row for key =\\', self.Key)\\n\\n    def expand(self, expand_x=False, expand_y=False, expand_row=True):\\n        \"\"\"\\n        Causes the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\\n\\n        :param expand_x:   If True Element will expand in the Horizontal directions\\n        :type expand_x:    (bool)\\n        :param expand_y:   If True Element will expand in the Vertical directions\\n        :type expand_y:    (bool)\\n        :param expand_row: If True the row containing the element will also expand. Without this your element is \"trapped\" within the row\\n        :type expand_row:  (bool)\\n        \"\"\"\\n        if expand_x and expand_y:\\n            fill = tk.BOTH\\n        elif expand_x:\\n            fill = tk.X\\n        elif expand_y:\\n            fill = tk.Y\\n        else:\\n            return\\n\\n        if not self._widget_was_created():\\n            return\\n        self.Widget.pack(expand=True, fill=fill)\\n        self.ParentRowFrame.pack(expand=expand_row, fill=fill)\\n        if self.element_frame is not None:\\n            self.element_frame.pack(expand=True, fill=fill)\\n\\n    def set_cursor(self, cursor=None, cursor_color=None):\\n        \"\"\"\\n        Sets the cursor for the current Element.\\n        \"Cursor\" is used in 2 different ways in this call.\\n        For the parameter \"cursor\" it\\'s actually the mouse pointer.\\n        If you do not want any mouse pointer, then use the string \"none\"\\n        For the parameter \"cursor_color\" it\\'s the color of the beam used when typing into an input element\\n\\n        :param cursor:       The tkinter cursor name\\n        :type cursor:        (str)\\n        :param cursor_color: color to set the \"cursor\" to\\n        :type cursor_color:  (str)\\n        \"\"\"\\n        if not self._widget_was_created():\\n            return\\n        if cursor is not None:\\n            try:\\n                self.Widget.config(cursor=cursor)\\n            except Exception as e:\\n                print(\\'Warning bad cursor specified \\', cursor)\\n                print(e)\\n        if cursor_color is not None:\\n            try:\\n                self.Widget.config(insertbackground=cursor_color)\\n            except Exception as e:\\n                print(\\'Warning bad cursor color\\', cursor_color)\\n                print(e)\\n\\n    def set_vscroll_position(self, percent_from_top):\\n        \"\"\"\\n        Attempts to set the vertical scroll postition for an element\\'s Widget\\n        :param percent_from_top: From 0 to 1.0, the percentage from the top to move scrollbar to\\n        :type percent_from_top:  (float)\\n        \"\"\"\\n        if self.Type == ELEM_TYPE_COLUMN and self.Scrollable:\\n            widget = self.widget.canvas  # scrollable column is a special case\\n        else:\\n            widget = self.widget\\n\\n        try:\\n            widget.yview_moveto(percent_from_top)\\n        except Exception as e:\\n            print(\\'Warning setting the vertical scroll (yview_moveto failed)\\')\\n            print(e)\\n\\n\\n    def set_hscroll_position(self, percent_from_left):\\n        \"\"\"\\n        Attempts to set the horizontal scroll postition for an element\\'s Widget\\n        :param percent_from_left: From 0 to 1.0, the percentage from the left to move scrollbar to\\n        :type percent_from_left:  (float)\\n        \"\"\"\\n        if self.Type == ELEM_TYPE_COLUMN and self.Scrollable:\\n            widget = self.widget.canvas  # scrollable column is a special case\\n        else:\\n            widget = self.widget\\n\\n        try:\\n            widget.xview_moveto(percent_from_left)\\n        except Exception as e:\\n            print(\\'Warning setting the horizontal scroll (xview_moveto failed)\\')\\n            print(e)\\n\\n\\n    def _widget_was_created(self):\\n        \"\"\"\\n        Determines if a Widget was created for this element.\\n\\n        :return: True if a Widget has been created previously (Widget is not None)\\n        :rtype:  (bool)\\n        \"\"\"\\n        if self.Widget is not None:\\n            return True\\n        else:\\n            if SUPPRESS_WIDGET_NOT_FINALIZED_WARNINGS:\\n                return False\\n\\n            warnings.warn(\\'You cannot Update element with key = {} until the window.read() is called or finalize=True when creating window\\'.format(self.Key), UserWarning)\\n            if not SUPPRESS_ERROR_POPUPS:\\n                _error_popup_with_traceback(\\'Unable to complete operation on element with key {}\\'.format(self.Key),\\n                                            \\'You cannot perform operations (such as calling update) on an Element until:\\',\\n                                            \\' window.read() is called or finalize=True when Window created.\\',\\n                                            \\'Adding a \"finalize=True\" parameter to your Window creation will likely fix this.\\',\\n                                            _create_error_message(),\\n                                            )\\n            return False\\n\\n    def _grab_anywhere_on_using_control_key(self):\\n        \"\"\"\\n        Turns on Grab Anywhere functionality AFTER a window has been created.  Don\\'t try on a window that\\'s not yet\\n        been Finalized or Read.\\n        \"\"\"\\n        self.Widget.bind(\"<Control-Button-1>\", self.ParentForm._StartMove)\\n        self.Widget.bind(\"<Control-ButtonRelease-1>\", self.ParentForm._StopMove)\\n        self.Widget.bind(\"<Control-B1-Motion>\", self.ParentForm._OnMotion)\\n\\n    def _grab_anywhere_on(self):\\n        \"\"\"\\n        Turns on Grab Anywhere functionality AFTER a window has been created.  Don\\'t try on a window that\\'s not yet\\n        been Finalized or Read.\\n        \"\"\"\\n        self.Widget.bind(\"<ButtonPress-1>\", self.ParentForm._StartMove)\\n        self.Widget.bind(\"<ButtonRelease-1>\", self.ParentForm._StopMove)\\n        self.Widget.bind(\"<B1-Motion>\", self.ParentForm._OnMotion)\\n\\n    def _grab_anywhere_off(self):\\n        \"\"\"\\n        Turns off Grab Anywhere functionality AFTER a window has been created.  Don\\'t try on a window that\\'s not yet\\n        been Finalized or Read.\\n        \"\"\"\\n        self.Widget.unbind(\"<ButtonPress-1>\")\\n        self.Widget.unbind(\"<ButtonRelease-1>\")\\n        self.Widget.unbind(\"<B1-Motion>\")\\n\\n    def grab_anywhere_exclude(self):\\n        \"\"\"\\n        Excludes this element from being used by the grab_anywhere feature\\n        Handy for elements like a Graph element when dragging is enabled. You want the Graph element to get the drag events instead of the window dragging.\\n        \"\"\"\\n        self.ParentForm._grab_anywhere_ignore_these_list.append(self.Widget)\\n\\n    def grab_anywhere_include(self):\\n        \"\"\"\\n        Includes this element in the grab_anywhere feature\\n        This will allow you to make a Multline element drag a window for example\\n        \"\"\"\\n        self.ParentForm._grab_anywhere_include_these_list.append(self.Widget)\\n\\n\\n    def set_right_click_menu(self, menu=None):\\n        \"\"\"\\n        Sets a right click menu for an element.\\n        If a menu is already set for the element, it will call the tkinter destroy method to remove it\\n        :param menu:                   A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type menu:                    List[List[ List[str] | str ]]\\n        \"\"\"\\n        if menu == MENU_RIGHT_CLICK_DISABLED:\\n            return\\n        if menu is None:\\n            menu = self.ParentForm.RightClickMenu\\n            if menu is None:\\n                return\\n        if menu:\\n            # If previously had a menu destroy it\\n            if self.TKRightClickMenu:\\n                try:\\n                    self.TKRightClickMenu.destroy()     # just in case there\\'s a problem let\\'s not crash\\n                except:\\n                    pass\\n            top_menu = tk.Menu(self.ParentForm.TKroot, tearoff=self.ParentForm.right_click_menu_tearoff, tearoffcommand=self._tearoff_menu_callback)\\n\\n            if self.ParentForm.right_click_menu_background_color not in (COLOR_SYSTEM_DEFAULT, None):\\n                top_menu.config(bg=self.ParentForm.right_click_menu_background_color)\\n            if self.ParentForm.right_click_menu_text_color not in (COLOR_SYSTEM_DEFAULT, None):\\n                top_menu.config(fg=self.ParentForm.right_click_menu_text_color)\\n            if self.ParentForm.right_click_menu_disabled_text_color not in (COLOR_SYSTEM_DEFAULT, None):\\n                top_menu.config(disabledforeground=self.ParentForm.right_click_menu_disabled_text_color)\\n            if self.ParentForm.right_click_menu_font is not None:\\n                top_menu.config(font=self.ParentForm.right_click_menu_font)\\n\\n            if self.ParentForm.right_click_menu_selected_colors[0] not in (COLOR_SYSTEM_DEFAULT, None):\\n                top_menu.config(activeforeground=self.ParentForm.right_click_menu_selected_colors[0])\\n            if self.ParentForm.right_click_menu_selected_colors[1] not in (COLOR_SYSTEM_DEFAULT, None):\\n                top_menu.config(activebackground=self.ParentForm.right_click_menu_selected_colors[1])\\n            AddMenuItem(top_menu, menu[1], self, right_click_menu=True)\\n            self.TKRightClickMenu = top_menu\\n            if self.ParentForm.RightClickMenu:            # if the top level has a right click menu, then setup a callback for the Window itself\\n                if self.ParentForm.TKRightClickMenu is None:\\n                    self.ParentForm.TKRightClickMenu = top_menu\\n                    if (running_mac()):\\n                        self.ParentForm.TKroot.bind(\\'<ButtonRelease-2>\\', self.ParentForm._RightClickMenuCallback)\\n                    else:\\n                        self.ParentForm.TKroot.bind(\\'<ButtonRelease-3>\\', self.ParentForm._RightClickMenuCallback)\\n            if (running_mac()):\\n                self.Widget.bind(\\'<ButtonRelease-2>\\', self._RightClickMenuCallback)\\n            else:\\n                self.Widget.bind(\\'<ButtonRelease-3>\\', self._RightClickMenuCallback)\\n\\n\\n    def save_element_screenshot_to_disk(self, filename=None):\\n        \"\"\"\\n        Saves an image of the PySimpleGUI window provided into the filename provided\\n\\n        :param filename:        Optional filename to save screenshot to. If not included, the User Settinds are used to get the filename\\n        :return:                A PIL ImageGrab object that can be saved or manipulated\\n        :rtype:                 (PIL.ImageGrab | None)\\n        \"\"\"\\n        global pil_import_attempted, pil_imported, PIL, ImageGrab, Image\\n\\n        if not pil_import_attempted:\\n            try:\\n                import PIL as PIL\\n                from PIL import ImageGrab\\n                from PIL import Image\\n                pil_imported = True\\n                pil_import_attempted = True\\n            except:\\n                pil_imported = False\\n                pil_import_attempted = True\\n                print(\\'FAILED TO IMPORT PIL!\\')\\n                return None\\n        try:\\n            # Add a little to the X direction if window has a titlebar\\n            rect = (\\n            self.widget.winfo_rootx(), self.widget.winfo_rooty(), self.widget.winfo_rootx() + self.widget.winfo_width(), self.widget.winfo_rooty() + self.widget.winfo_height())\\n\\n            grab = ImageGrab.grab(bbox=rect)\\n            # Save the grabbed image to disk\\n        except Exception as e:\\n            # print(e)\\n            popup_error_with_traceback(\\'Screen capture failure\\', \\'Error happened while trying to save screencapture of an element\\', e)\\n            return None\\n\\n        # return grab\\n        if filename is None:\\n            folder = pysimplegui_user_settings.get(\\'-screenshots folder-\\', \\'\\')\\n            filename = pysimplegui_user_settings.get(\\'-screenshots filename-\\', \\'\\')\\n            full_filename = os.path.join(folder, filename)\\n        else:\\n            full_filename = filename\\n        if full_filename:\\n            try:\\n                grab.save(full_filename)\\n            except Exception as e:\\n                popup_error_with_traceback(\\'Screen capture failure\\', \\'Error happened while trying to save screencapture\\', e)\\n        else:\\n            popup_error_with_traceback(\\'Screen capture failure\\', \\'You have attempted a screen capture but have not set up a good filename to save to\\')\\n        return grab\\n\\n    def _pack_forget_save_settings(self, alternate_widget=None):\\n        \"\"\"\\n        Performs a pack_forget which will make a widget invisible.\\n        This method saves the pack settings so that they can be restored if the element is made visible again\\n\\n        :param alternate_widget:   Widget to use that\\'s different than the one defined in Element.Widget. These are usually Frame widgets\\n        :type alternate_widget:    (tk.Widget)\\n        \"\"\"\\n\\n        if alternate_widget is not None and self.Widget is None:\\n            return\\n\\n        widget = alternate_widget if alternate_widget is not None else self.Widget\\n        # if the widget is already invisible (i.e. not packed) then will get an error\\n        try:\\n            pack_settings = widget.pack_info()\\n            self.pack_settings = pack_settings\\n            widget.pack_forget()\\n        except:\\n            pass\\n\\n    def _pack_restore_settings(self, alternate_widget=None):\\n        \"\"\"\\n        Restores a previously packated widget which will make it visible again.\\n        If no settings were saved, then the widget is assumed to have not been unpacked and will not try to pack it again\\n\\n        :param alternate_widget:   Widget to use that\\'s different than the one defined in Element.Widget. These are usually Frame widgets\\n        :type alternate_widget:    (tk.Widget)\\n        \"\"\"\\n\\n        # if there are no saved pack settings, then assume it hasnb\\'t been packaed before. The request will be ignored\\n        if self.pack_settings is None:\\n            return\\n\\n        widget = alternate_widget if alternate_widget is not None else self.Widget\\n        if widget is not None:\\n            widget.pack(**self.pack_settings)\\n\\n    def update(self, *args, **kwargs):\\n        \"\"\"\\n        A dummy update call.  This will only be called if an element hasn\\'t implemented an update method\\n        It is provided here for docstring purposes.  If you got here by browing code via PyCharm, know\\n        that this is not the function that will be called.  Your actual element\\'s update method will be called.\\n\\n        If you call update, you must call window.refresh if you want the change to happen prior to your next\\n        window.read() call. Normally uou don\\'t do this as the window.read call is likely going to happen next.\\n        \"\"\"\\n        print(\\'* Base Element Class update was called. Your element does not seem to have an update method\\')\\n\\n    def __call__(self, *args, **kwargs):\\n        \"\"\"\\n        Makes it possible to \"call\" an already existing element.  When you do make the \"call\", it actually calls\\n        the Update method for the element.\\n        Example:    If this text element was in yoiur layout:\\n                    sg.Text(\\'foo\\', key=\\'T\\')\\n                    Then you can call the Update method for that element by writing:\\n                    window.find_element(\\'T\\')(\\'new text value\\')\\n        \"\"\"\\n        return self.update(*args, **kwargs)\\n\\n    SetTooltip = set_tooltip\\n    SetFocus = set_focus\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Input Class                                  #\\n# ---------------------------------------------------------------------- #\\nclass Input(Element):\\n    \"\"\"\\n    Display a single text input field.  Based on the tkinter Widget `Entry`\\n    \"\"\"\\n\\n    def __init__(self, default_text=\\'\\', size=(None, None), s=(None, None), disabled=False, password_char=\\'\\', setting=None,\\n                 justification=None, background_color=None, text_color=None, font=None, tooltip=None, border_width=None,\\n                 change_submits=False, enable_events=False, do_not_clear=True, key=None, k=None, focus=False, pad=None, p=None,\\n                 use_readonly_for_disable=True, readonly=False, disabled_readonly_background_color=None, disabled_readonly_text_color=None, selected_text_color=None,\\n                 selected_background_color=None, expand_x=False, expand_y=False,\\n                 right_click_menu=None, visible=True, metadata=None):\\n        \"\"\"\\n        :param default_text:                       Text initially shown in the input box as a default value(Default value = \\'\\'). Will automatically be converted to string\\n        :type default_text:                        (Any)\\n        :param size:                               w=characters-wide, h=rows-high. If an int is supplied rather than a tuple, then a tuple is created width=int supplied and heigh=1\\n        :type size:                                (int, int) |  (int, None) | int\\n        :param s:                                  Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                                   (int, int)  | (None, None) | int\\n        :param disabled:                           set disable state for element (Default = False)\\n        :type disabled:                            (bool)\\n        :param password_char:                      Password character if this is a password field (Default value = \\'\\')\\n        :type password_char:                       (char)\\n        :param setting:                            If not None, then this element will be saved in a settings file using the key for the element\\n        :type setting:                             (Any)\\n        :param justification:                      justification for data display. Valid choices - left, right, center\\n        :type justification:                       (str)\\n        :param background_color:                   color of background in one of the color formats\\n        :type background_color:                    (str)\\n        :param text_color:                         color of the text\\n        :type text_color:                          (str)\\n        :param font:                               specifies the font family, size. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:                                (str or (str, int[, str]) or None)\\n        :param tooltip:                            text, that will appear when mouse hovers over the element\\n        :type tooltip:                             (str)\\n        :param border_width:                       width of border around element in pixels\\n        :type border_width:                        (int)\\n        :param change_submits:                     * DEPRICATED DO NOT USE. Use `enable_events` instead\\n        :type change_submits:                      (bool)\\n        :param enable_events:                      If True then changes to this element are immediately reported as an event. Use this instead of change_submits (Default = False)\\n        :type enable_events:                       (bool)\\n        :param do_not_clear:                       If False then the field will be set to blank after ANY event (button, any event) (Default = True)\\n        :type do_not_clear:                        (bool)\\n        :param key:                                Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window\\n        :type key:                                 str | int | tuple | object\\n        :param k:                                  Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                                   str | int | tuple | object\\n        :param focus:                              Determines if initial focus should go to this element.\\n        :type focus:                               (bool)\\n        :param pad:                                Amount of padding to put around element. Normally (horizontal pixels, vertical pixels) but can be split apart further into ((horizontal left, horizontal right), (vertical above, vertical below)). If int is given, then converted to tuple (int, int) with the value provided duplicated\\n        :type pad:                                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                                  Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                                   (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param use_readonly_for_disable:           If True (the default) tkinter state set to \\'readonly\\'. Otherwise state set to \\'disabled\\'\\n        :type use_readonly_for_disable:            (bool)\\n        :param readonly:                           If True tkinter state set to \\'readonly\\'.  Use this in place of use_readonly_for_disable as another way of achieving readonly.  Note cannot set BOTH readonly and disabled as tkinter only supplies a single flag\\n        :type readonly:                            (bool)\\n        :param disabled_readonly_background_color: If state is set to readonly or disabled, the color to use for the background\\n        :type disabled_readonly_background_color:  (str)\\n        :param disabled_readonly_text_color:       If state is set to readonly or disabled, the color to use for the text\\n        :type disabled_readonly_text_color:        (str)\\n        :param selected_text_color:                Color of text when it is selected (using mouse or control+A, etc)\\n        :type selected_text_color:                 (str)\\n        :param selected_background_color:          Color of background when it is selected (using mouse or control+A, etc)\\n        :type selected_background_color:           (str)\\n        :param expand_x:                           If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:                            (bool)\\n        :param expand_y:                           If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:                            (bool)\\n        :param right_click_menu:                   A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type right_click_menu:                    List[List[ List[str] | str ]]\\n        :param visible:                            set visibility state of the element (Default = True)\\n        :type visible:                             (bool)\\n        :param metadata:                           User metadata that can be set to ANYTHING\\n        :type metadata:                            (Any)\\n        \"\"\"\\n\\n        self.DefaultText = default_text if default_text is not None else \\'\\'\\n        self.PasswordCharacter = password_char\\n        bg = background_color if background_color is not None else DEFAULT_INPUT_ELEMENTS_COLOR\\n        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR\\n        self.selected_text_color = selected_text_color\\n        self.selected_background_color = selected_background_color\\n        self.Focus = focus\\n        self.do_not_clear = do_not_clear\\n        self.Justification = justification\\n        self.Disabled = disabled\\n        self.ChangeSubmits = change_submits or enable_events\\n        self.RightClickMenu = right_click_menu\\n        self.UseReadonlyForDisable = use_readonly_for_disable\\n        self.disabled_readonly_background_color = disabled_readonly_background_color\\n        self.disabled_readonly_text_color = disabled_readonly_text_color\\n        self.ReadOnly = readonly\\n        self.BorderWidth = border_width if border_width is not None else DEFAULT_BORDER_WIDTH\\n        self.TKEntry = self.Widget = None  # type: tk.Entry\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        if setting is not None:\\n            self.setting = setting\\n            self.DefaultText = user_settings_get_entry(key, setting)\\n\\n        super().__init__(ELEM_TYPE_INPUT_TEXT, size=sz, background_color=bg, text_color=fg, key=key, pad=pad,\\n                         font=font, tooltip=tooltip, visible=visible, metadata=metadata)\\n\\n    def update(self, value=None, disabled=None, select=None, visible=None, text_color=None, background_color=None, font=None, move_cursor_to=\\'end\\', password_char=None, paste=None,\\n               readonly=None):\\n        \"\"\"\\n        Changes some of the settings for the Input Element. Must call `Window.Read` or `Window.Finalize` prior.\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param value:            new text to display as default text in Input field\\n        :type value:             (str)\\n        :param disabled:         disable or enable state of the element (sets Entry Widget to readonly or normal)\\n        :type disabled:          (bool)\\n        :param select:           if True, then the text will be selected\\n        :type select:            (bool)\\n        :param visible:          change visibility of element\\n        :type visible:           (bool)\\n        :param text_color:       change color of text being typed\\n        :type text_color:        (str)\\n        :param background_color: change color of the background\\n        :type background_color:  (str)\\n        :param font:             specifies the font family, size. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:              (str or (str, int[, str]) or None)\\n        :param move_cursor_to:   Moves the cursor to a particular offset. Defaults to \\'end\\'\\n        :type move_cursor_to:    int | str\\n        :param password_char:    Password character if this is a password field\\n        :type password_char:     str\\n        :param paste:            If True \"Pastes\" the value into the element rather than replacing the entire element. If anything is selected it is replaced. The text is inserted at the current cursor location.\\n        :type paste:             bool\\n        :param readonly:         if True make element readonly (user cannot change any choices). Enables the element if either choice are made.\\n        :type readonly:          (bool)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Input.update - The window was closed\\')\\n            return\\n\\n        if background_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKEntry.configure(background=background_color)\\n            self.BackgroundColor = background_color\\n        if text_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKEntry.configure(fg=text_color)\\n            self.TextColor = text_color\\n\\n        if disabled is True:\\n            if self.UseReadonlyForDisable:\\n                self.TKEntry.configure(fg=self.disabled_readonly_text_color)\\n                self.TKEntry[\\'state\\'] = \\'readonly\\'\\n            else:\\n                self.TKEntry.configure(fg=self.TextColor)\\n                self.TKEntry[\\'state\\'] = \\'disabled\\'\\n            self.Disabled = True\\n        elif disabled is False:\\n            self.TKEntry[\\'state\\'] = \\'normal\\'\\n            self.TKEntry.configure(fg=self.TextColor)\\n            self.Disabled = False\\n\\n        if readonly is True:\\n            self.TKEntry[\\'state\\'] = \\'readonly\\'\\n        elif readonly is False:\\n            self.TKEntry[\\'state\\'] = \\'normal\\'\\n\\n\\n\\n\\n        if value is not None:\\n            if paste is not True:\\n                try:\\n                    self.TKStringVar.set(value)\\n                except:\\n                    pass\\n            self.DefaultText = value\\n            if paste is True:\\n                try:\\n                    self.TKEntry.delete(\\'sel.first\\', \\'sel.last\\')\\n                except:\\n                    pass\\n                self.TKEntry.insert(\"insert\", value)\\n            if move_cursor_to == \\'end\\':\\n                self.TKEntry.icursor(tk.END)\\n            elif move_cursor_to is not None:\\n                self.TKEntry.icursor(move_cursor_to)\\n        if select is True:\\n            self.TKEntry.select_range(0, \\'end\\')\\n        elif select is False:\\n            self.TKEntry.select_clear()\\n        if visible is False:\\n            self._pack_forget_save_settings()\\n            # self.TKEntry.pack_forget()\\n        elif visible is True:\\n            self._pack_restore_settings()\\n            # self.TKEntry.pack(padx=self.pad_used[0], pady=self.pad_used[1])\\n            # self.TKEntry.pack(padx=self.pad_used[0], pady=self.pad_used[1], in_=self.ParentRowFrame)\\n        if visible is not None:\\n            self._visible = visible\\n        if password_char is not None:\\n            self.TKEntry.configure(show=password_char)\\n            self.PasswordCharacter = password_char\\n        if font is not None:\\n            self.TKEntry.configure(font=font)\\n\\n\\n\\n    def set_ibeam_color(self, ibeam_color=None):\\n        \"\"\"\\n        Sets the color of the I-Beam that is used to \"insert\" characters. This is oftens called a \"Cursor\" by\\n        many users.  To keep from being confused with tkinter\\'s definition of cursor (the mouse pointer), the term\\n        ibeam is used in this case.\\n        :param ibeam_color: color to set the \"I-Beam\" used to indicate where characters will be inserted\\n        :type ibeam_color:  (str)\\n        \"\"\"\\n\\n        if not self._widget_was_created():\\n            return\\n        if ibeam_color is not None:\\n            try:\\n                self.Widget.config(insertbackground=ibeam_color)\\n            except Exception as e:\\n                _error_popup_with_traceback(\\'Error setting I-Beam color in set_ibeam_color\\',\\n                           \\'The element has a key:\\', self.Key,\\n                            \\'The color passed in was:\\', ibeam_color)\\n\\n\\n\\n\\n    def get(self):\\n        \"\"\"\\n        Read and return the current value of the input element. Must call `Window.Read` or `Window.Finalize` prior\\n\\n        :return: current value of Input field or \\'\\' if error encountered\\n        :rtype:  (str)\\n        \"\"\"\\n        try:\\n            text = self.TKStringVar.get()\\n        except:\\n            text = \\'\\'\\n        return text\\n\\n    Get = get\\n    Update = update\\n\\n\\n# -------------------------  INPUT TEXT Element lazy functions  ------------------------- #\\nIn = Input\\nInputText = Input\\nI = Input\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Combo                                        #\\n# ---------------------------------------------------------------------- #\\nclass Combo(Element):\\n    \"\"\"\\n    ComboBox Element - A combination of a single-line input and a drop-down menu. User can type in their own value or choose from list.\\n    \"\"\"\\n\\n    def __init__(self, values, default_value=None, size=(None, None), s=(None, None), auto_size_text=None, background_color=None, text_color=None, button_background_color=None,\\n                 button_arrow_color=None, bind_return_key=False, setting=None, change_submits=False, enable_events=False, enable_per_char_events=None, disabled=False,right_click_menu=None, key=None, k=None, pad=None,\\n                 p=None, expand_x=False, expand_y=False, tooltip=None, readonly=False, font=None, visible=True, metadata=None):\\n        \"\"\"\\n        :param values:                  values to choose. While displayed as text, the items returned are what the caller supplied, not text\\n        :type values:                   List[Any] or Tuple[Any]\\n        :param default_value:           Choice to be displayed as initial value. Must match one of values variable contents\\n        :type default_value:            (Any)\\n        :param size:                    width, height. Width = characters-wide, height = NOTE it\\'s the number of entries to show in the list. If an Int is passed rather than a tuple, then height is auto-set to 1 and width is value of the int\\n        :type size:                     (int, int)  | (None, None) | int\\n        :param s:                       Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                        (int, int)  | (None, None) | int\\n        :param auto_size_text:          True if element should be the same size as the contents\\n        :type auto_size_text:           (bool)\\n        :param background_color:        color of background\\n        :type background_color:         (str)\\n        :param text_color:              color of the text\\n        :type text_color:               (str)\\n        :param button_background_color: The color of the background of the button on the combo box\\n        :type button_background_color:  (str)\\n        :param button_arrow_color:      The color of the arrow on the button on the combo box\\n        :type button_arrow_color:       (str)\\n        :param bind_return_key:         If True, then the return key will cause a the Combo to generate an event when return key is pressed\\n        :type bind_return_key:          (bool)\\n        :param setting:                 If not None, then this element will be saved in a settings file using the key for the element\\n        :type setting:                  (Any)\\n        :param change_submits:          DEPRICATED DO NOT USE. Use `enable_events` instead\\n        :type change_submits:           (bool)\\n        :param enable_events:           Turns on the element specific events. Combo event is when a choice is made\\n        :type enable_events:            (bool)\\n        :param enable_per_char_events:  Enables generation of events for every character that\\'s input. This is like the Input element\\'s events\\n        :type enable_per_char_events:   (bool)\\n        :param disabled:                set disable state for element\\n        :type disabled:                 (bool)\\n        :param right_click_menu:        A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type right_click_menu:         List[List[ List[str] | str ]]\\n        :param key:                     Used with window.find_element and with return values to uniquely identify this element\\n        :type key:                      str | int | tuple | object\\n        :param k:                       Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                        str | int | tuple | object\\n        :param pad:                     Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it\\'s converted into a tuple (int, int)\\n        :type pad:                      (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                       Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                        (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param expand_x:                If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:                 (bool)\\n        :param expand_y:                If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:                 (bool)\\n        :param tooltip:                 text that will appear when mouse hovers over this element\\n        :type tooltip:                  (str)\\n        :param readonly:                make element readonly (user can\\'t change). True means user cannot change\\n        :type readonly:                 (bool)\\n        :param font:                    specifies the font family, size, etc. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:                     (str or (str, int[, str]) or None)\\n        :param visible:                 set visibility state of the element\\n        :type visible:                  (bool)\\n        :param metadata:                User metadata that can be set to ANYTHING\\n        :type metadata:                 (Any)\\n        \"\"\"\\n\\n        self.Values = values\\n        self.DefaultValue = default_value\\n        self.ChangeSubmits = change_submits or enable_events\\n        self.Widget = self.TKCombo = None  # type: ttk.Combobox\\n        self.Disabled = disabled\\n        self.Readonly = readonly\\n        self.BindReturnKey = bind_return_key\\n        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR\\n        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        self.RightClickMenu = right_click_menu\\n\\n        if button_background_color is None:\\n            self.button_background_color = theme_button_color()[1]\\n        else:\\n            self.button_background_color = button_background_color\\n        if button_arrow_color is None:\\n            self.button_arrow_color = theme_button_color()[0]\\n        else:\\n            self.button_arrow_color = button_arrow_color\\n        self.enable_per_char_events = enable_per_char_events\\n        if setting is not None:\\n            self.setting = setting\\n            self.DefaultValue = user_settings_get_entry(key, setting)\\n\\n        super().__init__(ELEM_TYPE_INPUT_COMBO, size=sz, auto_size_text=auto_size_text, background_color=bg,\\n                         text_color=fg, key=key, pad=pad, tooltip=tooltip, font=font or DEFAULT_FONT, visible=visible, metadata=metadata)\\n\\n    def update(self, value=None, values=None, set_to_index=None, disabled=None, readonly=None, font=None, visible=None, size=(None, None), select=None, text_color=None, background_color=None):\\n        \"\"\"\\n        Changes some of the settings for the Combo Element. Must call `Window.Read` or `Window.Finalize` prior.\\n        Note that the state can be in 3 states only.... enabled, disabled, readonly even\\n        though more combinations are available. The easy way to remember is that if you\\n        change the readonly parameter then you are enabling the element.\\n\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param value:            change which value is current selected based on new list of previous list of choices\\n        :type value:             (Any)\\n        :param values:           change list of choices\\n        :type values:            List[Any]\\n        :param set_to_index:     change selection to a particular choice starting with index = 0\\n        :type set_to_index:      (int)\\n        :param disabled:         disable or enable state of the element\\n        :type disabled:          (bool)\\n        :param readonly:         if True make element readonly (user cannot change any choices). Enables the element if either choice are made.\\n        :type readonly:          (bool)\\n        :param font:             specifies the font family, size, etc. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:              (str or (str, int[, str]) or None)\\n        :param visible:          control visibility of element\\n        :type visible:           (bool)\\n        :param size:             width, height. Width = characters-wide, height = NOTE it\\'s the number of entries to show in the list\\n        :type size:              (int, int)\\n        :param select:           if True, then the text will be selected, if False then selection will be cleared\\n        :type select:            (bool)\\n        :param background_color: color of background\\n        :type background_color:  (str)\\n        :param text_color:       color of the text\\n        :type text_color:        (str)\\n        \"\"\"\\n        if size != (None, None):\\n            if isinstance(size, int):\\n                size = (size, 1)\\n            if isinstance(size, tuple) and len(size) == 1:\\n                size = (size[0], 1)\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Combo.update - The window was closed\\')\\n            return\\n\\n        if values is not None:\\n            try:\\n                self.TKCombo[\\'values\\'] = values\\n                # self.TKCombo.current(0)       # don\\'t set any value if a new set of values was made\\n            except:\\n                pass\\n            self.Values = values\\n            if value is None:\\n                self.TKCombo.set(\\'\\')\\n            if size == (None, None):\\n                max_line_len = max([len(str(l)) for l in self.Values]) if len(self.Values) else 0\\n                if self.AutoSizeText is False:\\n                    width = self.Size[0]\\n                else:\\n                    width = max_line_len + 1\\n                self.TKCombo.configure(width=width)\\n            else:\\n                self.TKCombo.configure(height=size[1])\\n                self.TKCombo.configure(width=size[0])\\n        if value is not None:\\n            if value not in self.Values:\\n                self.TKCombo.set(value)\\n            else:\\n                for index, v in enumerate(self.Values):\\n                    if v == value:\\n                        try:\\n                            self.TKCombo.current(index)\\n                        except:\\n                            pass\\n                        self.DefaultValue = value\\n                        break\\n        if set_to_index is not None:\\n            try:\\n                self.TKCombo.current(set_to_index)\\n                self.DefaultValue = self.Values[set_to_index]\\n            except:\\n                pass\\n        if readonly:\\n            self.Readonly = True\\n            self.TKCombo[\\'state\\'] = \\'readonly\\'\\n        elif readonly is False:\\n            self.Readonly = False\\n            self.TKCombo[\\'state\\'] = \\'enable\\'\\n        if disabled is True:\\n            self.TKCombo[\\'state\\'] = \\'disable\\'\\n        elif disabled is False and self.Readonly is True:\\n            self.TKCombo[\\'state\\'] = \\'readonly\\'\\n        elif disabled is False and self.Readonly is False:\\n            self.TKCombo[\\'state\\'] = \\'enable\\'\\n        self.Disabled = disabled if disabled is not None else self.Disabled\\n\\n        combostyle = self.ttk_style\\n        style_name = self.ttk_style_name\\n        if text_color is not None:\\n            combostyle.configure(style_name, foreground=text_color)\\n            combostyle.configure(style_name, selectforeground=text_color)\\n            combostyle.configure(style_name, insertcolor=text_color)\\n            combostyle.map(style_name, fieldforeground=[(\\'readonly\\', text_color)])\\n            self.TextColor = text_color\\n        if background_color is not None:\\n            combostyle.configure(style_name, selectbackground=background_color)\\n            combostyle.map(style_name, fieldbackground=[(\\'readonly\\', background_color)])\\n            combostyle.configure(style_name, fieldbackground=background_color)\\n            self.BackgroundColor = background_color\\n\\n\\n        if self.Readonly is True:\\n            if text_color not in (None, COLOR_SYSTEM_DEFAULT):\\n                combostyle.configure(style_name, selectforeground=text_color)\\n            if background_color not in (None, COLOR_SYSTEM_DEFAULT):\\n                combostyle.configure(style_name, selectbackground=background_color)\\n\\n\\n        if font is not None:\\n            self.Font = font\\n            self.TKCombo.configure(font=font)\\n            self._dropdown_newfont = tkinter.font.Font(font=font)\\n            self.ParentRowFrame.option_add(\"*TCombobox*Listbox*Font\", self._dropdown_newfont)\\n\\n\\n        # make tcl call to deal with colors for the drop-down formatting\\n        try:\\n            if self.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT) and \\\\\\n                self.TextColor not in (None, COLOR_SYSTEM_DEFAULT):\\n                self.Widget.tk.eval(\\n            \\'[ttk::combobox::PopdownWindow {}].f.l configure -foreground {} -background {} -selectforeground {} -selectbackground {} -font {}\\'.format(self.Widget, self.TextColor, self.BackgroundColor, self.BackgroundColor, self.TextColor, self._dropdown_newfont))\\n        except Exception as e:\\n            pass    # going to let this one slide\\n\\n        if visible is False:\\n            self._pack_forget_save_settings()\\n            # self.TKCombo.pack_forget()\\n        elif visible is True:\\n            self._pack_restore_settings()\\n            # self.TKCombo.pack(padx=self.pad_used[0], pady=self.pad_used[1])\\n        if visible is not None:\\n            self._visible = visible\\n        if select is True:\\n           self.TKCombo.select_range(0, tk.END)\\n        elif select is False:\\n           self.TKCombo.select_clear()\\n\\n\\n    def get(self):\\n        \"\"\"\\n        Returns the current (right now) value of the Combo.  DO NOT USE THIS AS THE NORMAL WAY OF READING A COMBO!\\n        You should be using values from your call to window.read instead.  Know what you\\'re doing if you use it.\\n\\n        :return: Returns the value of what is currently chosen\\n        :rtype:  Any | None\\n        \"\"\"\\n        try:\\n            if self.TKCombo.current() == -1:  # if the current value was not in the original list\\n                value = self.TKCombo.get()  # then get the value typed in by user\\n            else:\\n                value = self.Values[self.TKCombo.current()]  # get value from original list given index\\n        except:\\n            value = None  # only would happen if user closes window\\n        return value\\n\\n    Get = get\\n    Update = update\\n\\n\\n# -------------------------  INPUT COMBO Element lazy functions  ------------------------- #\\nInputCombo = Combo\\nDropDown = InputCombo\\nDrop = InputCombo\\nDD = Combo\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Option Menu                                  #\\n# ---------------------------------------------------------------------- #\\nclass OptionMenu(Element):\\n    \"\"\"\\n    Option Menu is an Element available ONLY on the tkinter port of PySimpleGUI.  It\\'s is a widget that is unique\\n    to tkinter.  However, it looks much like a ComboBox.  Instead of an arrow to click to pull down the list of\\n    choices, another little graphic is shown on the widget to indicate where you click.  After clicking to activate,\\n    it looks like a Combo Box that you scroll to select a choice.\\n    \"\"\"\\n\\n    def __init__(self, values, default_value=None, size=(None, None), s=(None, None), disabled=False, enable_events=False, auto_size_text=None, expand_x=False, expand_y=False,\\n                 background_color=None, text_color=None, key=None, k=None, pad=None, p=None, tooltip=None, visible=True, metadata=None):\\n        \"\"\"\\n        :param values:           Values to be displayed\\n        :type values:            List[Any] or Tuple[Any]\\n        :param default_value:    the value to choose by default\\n        :type default_value:     (Any)\\n        :param size:             (width, height) size in characters (wide), height is ignored and present to be consistent with other elements\\n        :type size:              (int, int) (width, UNUSED)\\n        :param s:                Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                 (int, int)  | (None, None) | int\\n        :param disabled:         control enabled / disabled\\n        :type disabled:          (bool)\\n        :param enable_events:    Turns on the element specific events. OptionMenu event is when a choice is made\\n        :type enable_events:     (bool)\\n        :param auto_size_text:   True if size of Element should match the contents of the items\\n        :type auto_size_text:    (bool)\\n        :param expand_x:         If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:          (bool)\\n        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:          (bool)\\n        :param background_color: color of background\\n        :type background_color:  (str)\\n        :param text_color:       color of the text\\n        :type text_color:        (str)\\n        :param key:              Used with window.find_element and with return values to uniquely identify this element\\n        :type key:               str | int | tuple | object\\n        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                 str | int | tuple | object\\n        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it\\'s converted into a tuple (int, int)\\n        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param tooltip:          text that will appear when mouse hovers over this element\\n        :type tooltip:           (str)\\n        :param visible:          set visibility state of the element\\n        :type visible:           (bool)\\n        :param metadata:         User metadata that can be set to ANYTHING\\n        :type metadata:          (Any)\\n        \"\"\"\\n\\n        self.Values = values\\n        self.DefaultValue = default_value\\n        self.Widget = self.TKOptionMenu = None  # type: tk.OptionMenu\\n        self.Disabled = disabled\\n        bg = background_color if background_color else DEFAULT_INPUT_ELEMENTS_COLOR\\n        fg = text_color if text_color is not None else DEFAULT_INPUT_TEXT_COLOR\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        self.ChangeSubmits = enable_events\\n\\n        super().__init__(ELEM_TYPE_INPUT_OPTION_MENU, size=sz, auto_size_text=auto_size_text, background_color=bg,\\n                         text_color=fg, key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata)\\n\\n    def update(self, value=None, values=None, disabled=None, visible=None, size=(None, None)):\\n        \"\"\"\\n        Changes some of the settings for the OptionMenu Element. Must call `Window.Read` or `Window.Finalize` prior\\n\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param value:    the value to choose by default\\n        :type value:     (Any)\\n        :param values:   Values to be displayed\\n        :type values:    List[Any]\\n        :param disabled: disable or enable state of the element\\n        :type disabled:  (bool)\\n        :param visible:  control visibility of element\\n        :type visible:   (bool)\\n        :param size:     (width, height) size in characters (wide), height is ignored and present to be consistent with other elements\\n        :type size:      (int, int) (width, UNUSED)\\n        \"\"\"\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in OptionMenu.update - The window was closed\\')\\n            return\\n\\n        if values is not None:\\n            self.Values = values\\n            self.TKOptionMenu[\\'menu\\'].delete(0, \\'end\\')\\n\\n            # Insert list of new options (tk._setit hooks them up to var)\\n            # self.TKStringVar.set(self.Values[0])\\n            for new_value in self.Values:\\n                self.TKOptionMenu[\\'menu\\'].add_command(label=new_value, command=tk._setit(self.TKStringVar, new_value))\\n            if value is None:\\n                self.TKStringVar.set(\\'\\')\\n\\n            if size == (None, None):\\n                max_line_len = max([len(str(l)) for l in self.Values]) if len(self.Values) else 0\\n                if self.AutoSizeText is False:\\n                    width = self.Size[0]\\n                else:\\n                    width = max_line_len + 1\\n                self.TKOptionMenu.configure(width=width)\\n            else:\\n                self.TKOptionMenu.configure(width=size[0])\\n\\n        if value is not None:\\n            self.DefaultValue = value\\n            self.TKStringVar.set(value)\\n\\n        if disabled is True:\\n            self.TKOptionMenu[\\'state\\'] = \\'disabled\\'\\n        elif disabled is False:\\n            self.TKOptionMenu[\\'state\\'] = \\'normal\\'\\n        self.Disabled = disabled if disabled is not None else self.Disabled\\n        if visible is False:\\n            self._pack_forget_save_settings()\\n            # self.TKOptionMenu.pack_forget()\\n        elif visible is True:\\n            self._pack_restore_settings()\\n            # self.TKOptionMenu.pack(padx=self.pad_used[0], pady=self.pad_used[1])\\n        if visible is not None:\\n            self._visible = visible\\n\\n    Update = update\\n\\n\\n# -------------------------  OPTION MENU Element lazy functions  ------------------------- #\\nInputOptionMenu = OptionMenu\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Listbox                                      #\\n# ---------------------------------------------------------------------- #\\nclass Listbox(Element):\\n    \"\"\"\\n    A List Box.  Provide a list of values for the user to choose one or more of.   Returns a list of selected rows\\n    when a window.read() is executed.\\n    \"\"\"\\n\\n    def __init__(self, values, default_values=None, select_mode=None, change_submits=False, enable_events=False,\\n                 bind_return_key=False, size=(None, None), s=(None, None), disabled=False, justification=None, auto_size_text=None, font=None, no_scrollbar=False,\\n                 horizontal_scroll=False, setting=None,\\n                 background_color=None, text_color=None, highlight_background_color=None, highlight_text_color=None,\\n                 sbar_trough_color=None, sbar_background_color=None, sbar_arrow_color=None, sbar_width=None, sbar_arrow_width=None, sbar_frame_color=None, sbar_relief=None,\\n                 key=None, k=None, pad=None, p=None, tooltip=None, expand_x=False, expand_y=False, right_click_menu=None, visible=True, metadata=None):\\n        \"\"\"\\n        :param values:                     list of values to display. Can be any type including mixed types as long as they have __str__ method\\n        :type values:                      List[Any] or Tuple[Any]\\n        :param default_values:             which values should be initially selected\\n        :type default_values:              List[Any]\\n        :param select_mode:                Select modes are used to determine if only 1 item can be selected or multiple and how they can be selected.   Valid choices begin with \"LISTBOX_SELECT_MODE_\" and include: LISTBOX_SELECT_MODE_SINGLE LISTBOX_SELECT_MODE_MULTIPLE LISTBOX_SELECT_MODE_BROWSE LISTBOX_SELECT_MODE_EXTENDED\\n        :type select_mode:                 (str)\\n        :param change_submits:             DO NOT USE. Only listed for backwards compat - Use enable_events instead\\n        :type change_submits:              (bool)\\n        :param enable_events:              Turns on the element specific events. Listbox generates events when an item is clicked\\n        :type enable_events:               (bool)\\n        :param bind_return_key:            If True, then the return key will cause a the Listbox to generate an event when return key is pressed\\n        :type bind_return_key:             (bool)\\n        :param size:                       w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1\\n        :type size:                        (int, int) |  (int, None) | int\\n        :param s:                          Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                           (int, int)  | (None, None) | int\\n        :param disabled:                   set disable state for element\\n        :type disabled:                    (bool)\\n        :param justification:              justification for items in listbox. Valid choices - left, right, center.  Default is left. NOTE - on some older versions of tkinter, not available\\n        :type justification:               (str)\\n        :param auto_size_text:             True if element should be the same size as the contents\\n        :type auto_size_text:              (bool)\\n        :param font:                       specifies the font family, size, etc.  Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:                        (str or (str, int[, str]) or None)\\n        :param no_scrollbar:               Controls if a scrollbar should be shown.  If True, no scrollbar will be shown\\n        :type no_scrollbar:                (bool)\\n        :param horizontal_scroll:          Controls if a horizontal scrollbar should be shown.  If True a horizontal scrollbar will be shown in addition to vertical\\n        :type horizontal_scroll:           (bool)\\n        :param setting:                    If not None, then this element will be saved in a settings file using the key for the element\\n        :type setting:                     (Any)\\n        :param background_color:           color of background\\n        :type background_color:            (str)\\n        :param text_color:                 color of the text\\n        :type text_color:                  (str)\\n        :param highlight_background_color: color of the background when an item is selected. Defaults to normal text color (a reverse look)\\n        :type highlight_background_color:  (str)\\n        :param highlight_text_color:       color of the text when an item is selected. Defaults to the normal background color (a rerverse look)\\n        :type highlight_text_color:        (str)\\n        :param sbar_trough_color:           Scrollbar color of the trough\\n        :type sbar_trough_color:            (str)\\n        :param sbar_background_color:       Scrollbar color of the background of the arrow buttons at the ends AND the color of the \"thumb\" (the thing you grab and slide). Switches to arrow color when mouse is over\\n        :type sbar_background_color:        (str)\\n        :param sbar_arrow_color:            Scrollbar color of the arrow at the ends of the scrollbar (it looks like a button). Switches to background color when mouse is over\\n        :type sbar_arrow_color:             (str)\\n        :param sbar_width:                  Scrollbar width in pixels\\n        :type sbar_width:                   (int)\\n        :param sbar_arrow_width:            Scrollbar width of the arrow on the scrollbar. It will potentially impact the overall width of the scrollbar\\n        :type sbar_arrow_width:             (int)\\n        :param sbar_frame_color:            Scrollbar Color of frame around scrollbar (available only on some ttk themes)\\n        :type sbar_frame_color:             (str)\\n        :param sbar_relief:                 Scrollbar relief that will be used for the \"thumb\" of the scrollbar (the thing you grab that slides). Should be a constant that is defined at starting with \"RELIEF_\" - RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID\\n        :type sbar_relief:                  (str)\\n        :param key:                        Used with window.find_element and with return values to uniquely identify this element\\n        :type key:                         str | int | tuple | object\\n        :param k:                          Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                           str | int | tuple | object\\n        :param pad:                        Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it\\'s converted into a tuple (int, int)\\n        :type pad:                         (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                          Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                           (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param tooltip:                    text, that will appear when mouse hovers over the element\\n        :type tooltip:                     (str)\\n        :param expand_x:                   If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:                    (bool)\\n        :param expand_y:                   If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:                    (bool)\\n        :param right_click_menu:           A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type right_click_menu:            List[List[ List[str] | str ]]\\n        :param visible:                    set visibility state of the element\\n        :type visible:                     (bool)\\n        :param metadata:                   User metadata that can be set to ANYTHING\\n        :type metadata:                    (Any)\\n        \"\"\"\\n\\n        if values is None:\\n            _error_popup_with_traceback(\\'Error in your Listbox definition - The values parameter cannot be None\\', \\'Use an empty list if you want no values in your Listbox\\')\\n\\n        self.Values = values\\n        self.DefaultValues = default_values\\n        self.TKListbox = None\\n        self.ChangeSubmits = change_submits or enable_events\\n        self.BindReturnKey = bind_return_key\\n        self.Disabled = disabled\\n        if select_mode == LISTBOX_SELECT_MODE_BROWSE:\\n            self.SelectMode = SELECT_MODE_BROWSE\\n        elif select_mode == LISTBOX_SELECT_MODE_EXTENDED:\\n            self.SelectMode = SELECT_MODE_EXTENDED\\n        elif select_mode == LISTBOX_SELECT_MODE_MULTIPLE:\\n            self.SelectMode = SELECT_MODE_MULTIPLE\\n        elif select_mode == LISTBOX_SELECT_MODE_SINGLE:\\n            self.SelectMode = SELECT_MODE_SINGLE\\n        else:\\n            self.SelectMode = DEFAULT_LISTBOX_SELECT_MODE\\n        bg = background_color if background_color is not None else theme_input_background_color()\\n        fg = text_color if text_color is not None else theme_input_text_color()\\n        self.HighlightBackgroundColor = highlight_background_color if highlight_background_color is not None else fg\\n        self.HighlightTextColor = highlight_text_color if highlight_text_color is not None else bg\\n        self.RightClickMenu = right_click_menu\\n        self.vsb = None  # type: tk.Scrollbar or None\\n        self.hsb = None  # type: tk.Scrollbar | None\\n        self.TKListbox = self.Widget = None  # type: tk.Listbox\\n        self.element_frame = None  # type: tk.Frame\\n        self.NoScrollbar = no_scrollbar\\n        self.HorizontalScroll = horizontal_scroll\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        self.justification = justification\\n        if setting is not None:\\n            self.setting = setting\\n            self.DefaultValues = user_settings_get_entry(key, setting)\\n\\n\\n        super().__init__(ELEM_TYPE_INPUT_LISTBOX, size=sz, auto_size_text=auto_size_text, font=font,\\n                         background_color=bg, text_color=fg, key=key, pad=pad, tooltip=tooltip, visible=visible, metadata=metadata,\\n                         sbar_trough_color=sbar_trough_color, sbar_background_color=sbar_background_color, sbar_arrow_color=sbar_arrow_color, sbar_width=sbar_width,\\n                         sbar_arrow_width=sbar_arrow_width, sbar_frame_color=sbar_frame_color, sbar_relief=sbar_relief)\\n\\n\\n    def update(self, values=None, disabled=None, set_to_index=None, scroll_to_index=None, select_mode=None, visible=None):\\n        \"\"\"\\n        Changes some of the settings for the Listbox Element. Must call `Window.Read` or `Window.Finalize` prior\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param values:          new list of choices to be shown to user\\n        :type values:           List[Any]\\n        :param disabled:        disable or enable state of the element\\n        :type disabled:         (bool)\\n        :param set_to_index:    highlights the item(s) indicated. If parm is an int one entry will be set. If is a list, then each entry in list is highlighted\\n        :type set_to_index:     int | list | tuple\\n        :param scroll_to_index: scroll the listbox so that this index is the first shown\\n        :type scroll_to_index:  (int)\\n        :param select_mode:     changes the select mode according to tkinter\\'s listbox widget\\n        :type select_mode:      (str)\\n        :param visible:         control visibility of element\\n        :type visible:          (bool)\\n        \"\"\"\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Listbox.update - The window was closed\\')\\n            return\\n\\n        if disabled is True:\\n            self.TKListbox.configure(state=\\'disabled\\')\\n        elif disabled is False:\\n            self.TKListbox.configure(state=\\'normal\\')\\n        self.Disabled = disabled if disabled is not None else self.Disabled\\n\\n        if values is not None:\\n            self.TKListbox.delete(0, \\'end\\')\\n            for item in list(values):\\n                self.TKListbox.insert(tk.END, item)\\n            # self.TKListbox.selection_set(0, 0)\\n            self.Values = list(values)\\n        if set_to_index is not None:\\n            self.TKListbox.selection_clear(0, len(self.Values))  # clear all listbox selections\\n            if type(set_to_index) in (tuple, list):\\n                for i in set_to_index:\\n                    try:\\n                        self.TKListbox.selection_set(i, i)\\n                    except:\\n                        warnings.warn(\\'* Listbox Update selection_set failed with index {}*\\'.format(set_to_index))\\n            else:\\n                try:\\n                    self.TKListbox.selection_set(set_to_index, set_to_index)\\n                except:\\n                    warnings.warn(\\'* Listbox Update selection_set failed with index {}*\\'.format(set_to_index))\\n        if visible is False:\\n            self._pack_forget_save_settings(self.element_frame)\\n        elif visible is True:\\n            self._pack_restore_settings(self.element_frame)\\n        if scroll_to_index is not None and len(self.Values):\\n            self.TKListbox.yview_moveto(scroll_to_index / len(self.Values))\\n        if select_mode is not None:\\n            try:\\n                self.TKListbox.config(selectmode=select_mode)\\n            except:\\n                print(\\'Listbox.update error trying to change mode to: \\', select_mode)\\n        if visible is not None:\\n            self._visible = visible\\n\\n    def set_value(self, values):\\n        \"\"\"\\n        Set listbox highlighted choices\\n\\n        :param values: new values to choose based on previously set values\\n        :type values:  List[Any] | Tuple[Any]\\n\\n        \"\"\"\\n        for index, item in enumerate(self.Values):\\n            try:\\n                if item in values:\\n                    self.TKListbox.selection_set(index)\\n                else:\\n                    self.TKListbox.selection_clear(index)\\n            except:\\n                pass\\n        self.DefaultValues = values\\n\\n    def get_list_values(self):\\n        # type: (Listbox) -> List[Any]\\n        \"\"\"\\n        Returns list of Values provided by the user in the user\\'s format\\n\\n        :return: List of values. Can be any / mixed types -> []\\n        :rtype:  List[Any]\\n        \"\"\"\\n        return self.Values\\n\\n    def get_indexes(self):\\n        \"\"\"\\n        Returns the items currently selected as a list of indexes\\n\\n        :return: A list of offsets into values that is currently selected\\n        :rtype:  List[int]\\n        \"\"\"\\n        return self.TKListbox.curselection()\\n\\n    def get(self):\\n        \"\"\"\\n        Returns the list of items currently selected in this listbox.  It should be identical\\n        to the value you would receive when performing a window.read() call.\\n\\n        :return: The list of currently selected items. The actual items are returned, not the indexes\\n        :rtype:  List[Any]\\n        \"\"\"\\n        try:\\n            items = self.TKListbox.curselection()\\n            value = [self.Values[int(item)] for item in items]\\n        except:\\n            value = []\\n        return value\\n\\n\\n\\n\\n    def select_index(self, index, highlight_text_color=None, highlight_background_color=None):\\n        \"\"\"\\n        Selects an index while providing capability to setting the selected color for the index to specific text/background color\\n\\n        :param index:                      specifies which item to change. index starts at 0 and goes to length of values list minus one\\n        :type  index:                      (int)\\n        :param highlight_text_color:       color of the text when this item is selected.\\n        :type  highlight_text_color:        (str)\\n        :param highlight_background_color: color of the background when this item is selected\\n        :type  highlight_background_color:  (str)\\n        \"\"\"\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Listbox.select_item - The window was closed\\')\\n            return\\n\\n        if index >= len(self.Values):\\n            _error_popup_with_traceback(\\'Index {} is out of range for Listbox.select_index. Max allowed index is {}.\\'.format(index, len(self.Values)-1))\\n            return\\n\\n        self.TKListbox.selection_set(index, index)\\n\\n        if highlight_text_color is not None:\\n            self.widget.itemconfig(index, selectforeground=highlight_text_color)\\n        if highlight_background_color is not None:\\n            self.widget.itemconfig(index, selectbackground=highlight_background_color)\\n\\n\\n    def set_index_color(self, index, text_color=None, background_color=None, highlight_text_color=None, highlight_background_color=None):\\n        \"\"\"\\n        Sets the color of a specific item without selecting it\\n\\n        :param index:                      specifies which item to change. index starts at 0 and goes to length of values list minus one\\n        :type  index:                      (int)\\n        :param text_color:                 color of the text for this item\\n        :type  text_color:                 (str)\\n        :param background_color:           color of the background for this item\\n        :type  background_color:           (str)\\n        :param highlight_text_color:       color of the text when this item is selected.\\n        :type  highlight_text_color:       (str)\\n        :param highlight_background_color: color of the background when this item is selected\\n        :type  highlight_background_color: (str)\\n        \"\"\"\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Listbox.set_item_color - The window was closed\\')\\n            return\\n\\n        if index >= len(self.Values):\\n            _error_popup_with_traceback(\\'Index {} is out of range for Listbox.set_index_color. Max allowed index is {}.\\'.format(index, len(self.Values)-1))\\n            return\\n\\n        if text_color is not None:\\n            self.widget.itemconfig(index, fg=text_color)\\n        if background_color is not None:\\n            self.widget.itemconfig(index, bg=background_color)\\n        if highlight_text_color is not None:\\n            self.widget.itemconfig(index, selectforeground=highlight_text_color)\\n        if highlight_background_color is not None:\\n            self.widget.itemconfig(index, selectbackground=highlight_background_color)\\n\\n\\n\\n    GetIndexes = get_indexes\\n    GetListValues = get_list_values\\n    SetValue = set_value\\n    Update = update\\n\\n\\nLBox = Listbox\\nLB = Listbox\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Radio                                        #\\n# ---------------------------------------------------------------------- #\\nclass Radio(Element):\\n    \"\"\"\\n    Radio Button Element - Used in a group of other Radio Elements to provide user with ability to select only\\n    1 choice in a list of choices.\\n    \"\"\"\\n\\n    def __init__(self, text, group_id, default=False, disabled=False, size=(None, None), s=(None, None), auto_size_text=None, setting=None,\\n                 background_color=None, text_color=None, circle_color=None, font=None, key=None, k=None, pad=None, p=None, tooltip=None,\\n                 change_submits=False, enable_events=False, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):\\n        \"\"\"\\n        :param text:             Text to display next to button\\n        :type text:              (str)\\n        :param group_id:         Groups together multiple Radio Buttons. Any type works\\n        :type group_id:          (Any)\\n        :param default:          Set to True for the one element of the group you want initially selected\\n        :type default:           (bool)\\n        :param disabled:         set disable state\\n        :type disabled:          (bool)\\n        :param size:             (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1\\n        :type size:              (int, int)  | (None, None) | int\\n        :param s:                Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                 (int, int)  | (None, None) | int\\n        :param auto_size_text:   if True will size the element to match the length of the text\\n        :type auto_size_text:    (bool)\\n        :param setting:          If not None, then this element will be saved in a settings file using the key for the element\\n        :type setting:           (Any)\\n        :param background_color: color of background\\n        :type background_color:  (str)\\n        :param text_color:       color of the text\\n        :type text_color:        (str)\\n        :param circle_color:     color of background of the circle that has the dot selection indicator in it\\n        :type circle_color:      (str)\\n        :param font:             specifies the  font family, size, etc. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:              (str or (str, int[, str]) or None)\\n        :param key:              Used with window.find_element and with return values to uniquely identify this element\\n        :type key:               str | int | tuple | object\\n        :param k:                Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                 str | int | tuple | object\\n        :param pad:              Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it\\'s converted into a tuple (int, int)\\n        :type pad:               (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                 (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param tooltip:          text, that will appear when mouse hovers over the element\\n        :type tooltip:           (str)\\n        :param change_submits:   DO NOT USE. Only listed for backwards compat - Use enable_events instead\\n        :type change_submits:    (bool)\\n        :param enable_events:    Turns on the element specific events. Radio Button events happen when an item is selected\\n        :type enable_events:     (bool)\\n        :param right_click_menu: A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type right_click_menu:  List[List[ List[str] | str ]]\\n        :param expand_x:         If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:          (bool)\\n        :param expand_y:         If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:          (bool)\\n        :param visible:          set visibility state of the element\\n        :type visible:           (bool)\\n        :param metadata:         User metadata that can be set to ANYTHING\\n        :type metadata:          (Any)\\n        \"\"\"\\n\\n        self.InitialState = default\\n        self.Text = text\\n        self.Widget = self.TKRadio = None  # type: tk.Radiobutton\\n        self.GroupID = group_id\\n        self.Value = None\\n        self.Disabled = disabled\\n        self.TextColor = text_color if text_color else theme_text_color()\\n        self.RightClickMenu = right_click_menu\\n\\n        if circle_color is None:\\n            # ---- compute color of circle background ---\\n            try:  # something in here will fail if a color is not specified in Hex\\n                text_hsl = _hex_to_hsl(self.TextColor)\\n                background_hsl = _hex_to_hsl(background_color if background_color else theme_background_color())\\n                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10\\n                if text_hsl[2] > background_hsl[2]:  # if the text is \"lighter\" than the background then make background darker\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)\\n                else:\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)\\n                self.CircleBackgroundColor = rgb(*bg_rbg)\\n            except:\\n                self.CircleBackgroundColor = background_color if background_color else theme_background_color()\\n        else:\\n            self.CircleBackgroundColor = circle_color\\n        self.ChangeSubmits = change_submits or enable_events\\n        self.EncodedRadioValue = None\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        if setting is not None:\\n            self.setting = bool(setting)\\n            self.InitialState = user_settings_get_entry(key, self.setting)\\n\\n\\n\\n\\n        super().__init__(ELEM_TYPE_INPUT_RADIO, size=sz, auto_size_text=auto_size_text, font=font,\\n                         background_color=background_color, text_color=self.TextColor, key=key, pad=pad,\\n                         tooltip=tooltip, visible=visible, metadata=metadata)\\n\\n    def update(self, value=None, text=None, background_color=None, text_color=None, circle_color=None, disabled=None, visible=None):\\n        \"\"\"\\n        Changes some of the settings for the Radio Button Element. Must call `Window.read` or `Window.finalize` prior\\n\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param value:            if True change to selected and set others in group to unselected\\n        :type value:             (bool)\\n        :param text:             Text to display next to radio button\\n        :type text:              (str)\\n        :param background_color: color of background\\n        :type background_color:  (str)\\n        :param text_color:       color of the text. Note this also changes the color of the selection dot\\n        :type text_color:        (str)\\n        :param circle_color:     color of background of the circle that has the dot selection indicator in it\\n        :type circle_color:      (str)\\n        :param disabled:         disable or enable state of the element\\n        :type disabled:          (bool)\\n        :param visible:          control visibility of element\\n        :type visible:           (bool)\\n        \"\"\"\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Radio.update - The window was closed\\')\\n            return\\n\\n        if value is not None:\\n            try:\\n                if value is True:\\n                    self.TKIntVar.set(self.EncodedRadioValue)\\n                elif value is False:\\n                    if self.TKIntVar.get() == self.EncodedRadioValue:\\n                        self.TKIntVar.set(0)\\n            except:\\n                print(\\'Error updating Radio\\')\\n            self.InitialState = value\\n        if text is not None:\\n            self.Text = str(text)\\n            self.TKRadio.configure(text=self.Text)\\n        if background_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKRadio.configure(background=background_color)\\n            self.BackgroundColor = background_color\\n        if text_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKRadio.configure(fg=text_color)\\n            self.TextColor = text_color\\n\\n        if circle_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.CircleBackgroundColor = circle_color\\n            self.TKRadio.configure(selectcolor=self.CircleBackgroundColor)  # The background of the radio button\\n        elif text_color or background_color:\\n            if self.TextColor not in (None, COLOR_SYSTEM_DEFAULT) and self.BackgroundColor not in (None, COLOR_SYSTEM_DEFAULT) and self.TextColor.startswith(\\n                    \\'#\\') and self.BackgroundColor.startswith(\\'#\\'):\\n                # ---- compute color of circle background ---\\n                text_hsl = _hex_to_hsl(self.TextColor)\\n                background_hsl = _hex_to_hsl(self.BackgroundColor if self.BackgroundColor else theme_background_color())\\n                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10\\n                if text_hsl[2] > background_hsl[2]:  # if the text is \"lighter\" than the background then make background darker\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)\\n                else:\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)\\n                self.CircleBackgroundColor = rgb(*bg_rbg)\\n                self.TKRadio.configure(selectcolor=self.CircleBackgroundColor)  # The background of the checkbox\\n\\n        if disabled is True:\\n            self.TKRadio[\\'state\\'] = \\'disabled\\'\\n        elif disabled is False:\\n            self.TKRadio[\\'state\\'] = \\'normal\\'\\n        self.Disabled = disabled if disabled is not None else self.Disabled\\n\\n        if visible is False:\\n            self._pack_forget_save_settings()\\n        elif visible is True:\\n            self._pack_restore_settings()\\n        if visible is not None:\\n            self._visible = visible\\n\\n    def reset_group(self):\\n        \"\"\"\\n        Sets all Radio Buttons in the group to not selected\\n        \"\"\"\\n        self.TKIntVar.set(0)\\n\\n    def get(self):\\n        # type: (Radio) -> bool\\n        \"\"\"\\n        A snapshot of the value of Radio Button -> (bool)\\n\\n        :return: True if this radio button is selected\\n        :rtype:  (bool)\\n        \"\"\"\\n        return self.TKIntVar.get() == self.EncodedRadioValue\\n\\n    Get = get\\n    ResetGroup = reset_group\\n    Update = update\\n\\n\\nR = Radio\\nRad = Radio\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Checkbox                                     #\\n# ---------------------------------------------------------------------- #\\nclass Checkbox(Element):\\n    \"\"\"\\n    Checkbox Element - Displays a checkbox and text next to it\\n    \"\"\"\\n\\n    def __init__(self, text, default=False, size=(None, None), s=(None, None), auto_size_text=None, setting=None, font=None, background_color=None, text_color=None, checkbox_color=None, highlight_thickness=1, change_submits=False, enable_events=False, disabled=False, key=None, k=None, pad=None, p=None, tooltip=None, right_click_menu=None, expand_x=False, expand_y=False, visible=True, metadata=None):\\n        \"\"\"\\n        :param text:                Text to display next to checkbox\\n        :type text:                 (str)\\n        :param default:             Set to True if you want this checkbox initially checked\\n        :type default:              (bool)\\n        :param size:                (w, h) w=characters-wide, h=rows-high. If an int instead of a tuple is supplied, then height is auto-set to 1\\n        :type size:                 (int, int)  | (None, None) | int\\n        :param s:                   Same as size parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, size will be used\\n        :type s:                    (int, int)  | (None, None) | int\\n        :param auto_size_text:      if True will size the element to match the length of the text\\n        :type auto_size_text:       (bool)\\n        :param setting:             If not None, then this element will be saved in a settings file using the key for the element\\n        :type setting:              (Any)\\n        :param font:                specifies the  font family, size, etc. Tuple or Single string format \\'name size styles\\'. Styles: italic * roman bold normal underline overstrike\\n        :type font:                 (str or (str, int[, str]) or None)\\n        :param background_color:    color of background\\n        :type background_color:     (str)\\n        :param text_color:          color of the text\\n        :type text_color:           (str)\\n        :param checkbox_color:      color of background of the box that has the check mark in it. The checkmark is the same color as the text\\n        :type checkbox_color:       (str)\\n        :param highlight_thickness: thickness of border around checkbox when gets focus\\n        :type highlight_thickness:  (int)\\n        :param change_submits:      DO NOT USE. Only listed for backwards compat - Use enable_events instead\\n        :type change_submits:       (bool)\\n        :param enable_events:       Turns on the element specific events. Checkbox events happen when an item changes\\n        :type enable_events:        (bool)\\n        :param disabled:            set disable state\\n        :type disabled:             (bool)\\n        :param key:                 Used with window.find_element and with return values to uniquely identify this element\\n        :type key:                  str | int | tuple | object\\n        :param k:                   Same as the Key. You can use either k or key. Which ever is set will be used.\\n        :type k:                    str | int | tuple | object\\n        :param pad:                 Amount of padding to put around element in pixels (left/right, top/bottom) or ((left, right), (top, bottom)) or an int. If an int, then it\\'s converted into a tuple (int, int)\\n        :type pad:                  (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param p:                   Same as pad parameter.  It\\'s an alias. If EITHER of them are set, then the one that\\'s set will be used. If BOTH are set, pad will be used\\n        :type p:                    (int, int) or ((int, int),(int,int)) or (int,(int,int)) or  ((int, int),int) | int\\n        :param tooltip:             text, that will appear when mouse hovers over the element\\n        :type tooltip:              (str)\\n        :param right_click_menu:    A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.\\n        :type right_click_menu:     List[List[ List[str] | str ]]\\n        :param expand_x:            If True the element will automatically expand in the X direction to fill available space\\n        :type expand_x:             (bool)\\n        :param expand_y:            If True the element will automatically expand in the Y direction to fill available space\\n        :type expand_y:             (bool)\\n        :param visible:             set visibility state of the element\\n        :type visible:              (bool)\\n        :param metadata:            User metadata that can be set to ANYTHING\\n        :type metadata:             (Any)\\n        \"\"\"\\n\\n        self.Text = text\\n        self.InitialState = bool(default)\\n        self.Value = None\\n        self.TKCheckbutton = self.Widget = None  # type: tk.Checkbutton\\n        self.Disabled = disabled\\n        self.TextColor = text_color if text_color else theme_text_color()\\n        self.RightClickMenu = right_click_menu\\n        self.highlight_thickness = highlight_thickness\\n\\n        # ---- compute color of circle background ---\\n        if checkbox_color is None:\\n            try:  # something in here will fail if a color is not specified in Hex\\n                text_hsl = _hex_to_hsl(self.TextColor)\\n                background_hsl = _hex_to_hsl(background_color if background_color else theme_background_color())\\n                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10\\n                if text_hsl[2] > background_hsl[2]:  # if the text is \"lighter\" than the background then make background darker\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)\\n                else:\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)\\n                self.CheckboxBackgroundColor = rgb(*bg_rbg)\\n            except:\\n                self.CheckboxBackgroundColor = background_color if background_color else theme_background_color()\\n        else:\\n            self.CheckboxBackgroundColor = checkbox_color\\n        self.ChangeSubmits = change_submits or enable_events\\n        key = key if key is not None else k\\n        sz = size if size != (None, None) else s\\n        pad = pad if pad is not None else p\\n        self.expand_x = expand_x\\n        self.expand_y = expand_y\\n        if setting is not None:\\n            self.setting = bool(setting)\\n            self.InitialState = user_settings_get_entry(key, self.setting)\\n\\n\\n        super().__init__(ELEM_TYPE_INPUT_CHECKBOX, size=sz, auto_size_text=auto_size_text, font=font,\\n                         background_color=background_color, text_color=self.TextColor, key=key, pad=pad,\\n                         tooltip=tooltip, visible=visible, metadata=metadata)\\n\\n    def get(self):\\n        # type: (Checkbox) -> bool\\n        \"\"\"\\n        Return the current state of this checkbox\\n\\n        :return: Current state of checkbox\\n        :rtype:  (bool)\\n        \"\"\"\\n        return self.TKIntVar.get() != 0\\n\\n    def update(self, value=None, text=None, background_color=None, text_color=None, checkbox_color=None, disabled=None, visible=None):\\n        \"\"\"\\n        Changes some of the settings for the Checkbox Element. Must call `Window.Read` or `Window.Finalize` prior.\\n        Note that changing visibility may cause element to change locations when made visible after invisible\\n\\n        Changes will not be visible in your window until you call window.read or window.refresh.\\n\\n        If you change visibility, your element may MOVE. If you want it to remain stationary, use the \"layout helper\"\\n        function \"pin\" to ensure your element is \"pinned\" to that location in your layout so that it returns there\\n        when made visible.\\n\\n        :param value:            if True checks the checkbox, False clears it\\n        :type value:             (bool)\\n        :param text:             Text to display next to checkbox\\n        :type text:              (str)\\n        :param background_color: color of background\\n        :type background_color:  (str)\\n        :param text_color:       color of the text. Note this also changes the color of the checkmark\\n        :type text_color:        (str)\\n        :param disabled:         disable or enable element\\n        :type disabled:          (bool)\\n        :param visible:          control visibility of element\\n        :type visible:           (bool)\\n        \"\"\"\\n\\n        if not self._widget_was_created():  # if widget hasn\\'t been created yet, then don\\'t allow\\n            return\\n\\n        if self._this_elements_window_closed():\\n            _error_popup_with_traceback(\\'Error in Checkbox.update - The window was closed\\')\\n            return\\n\\n        if value is not None:\\n            value = bool(value)\\n            try:\\n                self.TKIntVar.set(value)\\n                self.InitialState = value\\n            except:\\n                print(\\'Checkbox update failed\\')\\n        if disabled is True:\\n            self.TKCheckbutton.configure(state=\\'disabled\\')\\n        elif disabled is False:\\n            self.TKCheckbutton.configure(state=\\'normal\\')\\n        self.Disabled = disabled if disabled is not None else self.Disabled\\n\\n        if text is not None:\\n            self.Text = str(text)\\n            self.TKCheckbutton.configure(text=self.Text)\\n        if background_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKCheckbutton.configure(background=background_color)\\n            self.BackgroundColor = background_color\\n        if text_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.TKCheckbutton.configure(fg=text_color)\\n            self.TextColor = text_color\\n        # Color the checkbox itself\\n        if checkbox_color not in (None, COLOR_SYSTEM_DEFAULT):\\n            self.CheckboxBackgroundColor = checkbox_color\\n            self.TKCheckbutton.configure(selectcolor=self.CheckboxBackgroundColor)  # The background of the checkbox\\n        elif text_color or background_color:\\n            if self.CheckboxBackgroundColor is not None and self.TextColor is not None and self.BackgroundColor is not None and self.TextColor.startswith(\\n                    \\'#\\') and self.BackgroundColor.startswith(\\'#\\'):\\n                # ---- compute color of checkbox background ---\\n                text_hsl = _hex_to_hsl(self.TextColor)\\n                background_hsl = _hex_to_hsl(self.BackgroundColor if self.BackgroundColor else theme_background_color())\\n                l_delta = abs(text_hsl[2] - background_hsl[2]) / 10\\n                if text_hsl[2] > background_hsl[2]:  # if the text is \"lighter\" than the background then make background darker\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] - l_delta)\\n                else:\\n                    bg_rbg = _hsl_to_rgb(background_hsl[0], background_hsl[1], background_hsl[2] + l_delta)\\n                self.CheckboxBackgroundColor = rgb(*bg_rbg)\\n                self.TKCheckbutton.configure(selectcolor=self.CheckboxBackgroundColor)  # The background of the checkbox\\n\\n        if visible is False:\\n            self._pack_forget_save_settings()\\n        elif visible is True:\\n            self._pack_restore_settings()\\n\\n        if visible is not None:\\n            self._visible = visible\\n\\n    Get = get\\n    Update = update\\n\\n\\n# -------------------------  CHECKBOX Element lazy functions  ------------------------- #\\nCB = Checkbox\\nCBox = Checkbox\\nCheck = Checkbox\\n\\n\\n# ---------------------------------------------------------------------- #\\n#                           Spin                                         #\\n# ---------------------------------------------------------------------- #\\n\\nclass Spin(Element):\\n    \"\"\"\\n    A spinner with up/down buttons and a single line of text. Choose 1 values from list\\n    \"\"\"\\n\\n    def __init__(self, values, initial_value=None, disabled=False, change_submits=False, enable_events=False, readonly=False, setting=None,\\n                 size=(None, None), s=(None, None), auto_size_text=None, bind_return_key=None, font=None, background_color=None, text <clipped 2205913 chars>"
EA I|J|K
M L:"signature"
M M:"bytearray"
M N:"bytearray(b'\\x8f\\xd7{\\xf1\\xfeb#$P\\x06\\xf8^FG$c\\xa4\\xa7?\\xb5\\xd7\\r\\xc1\\x1b\\xffqf\\xeb\\xf0\\x7fd\\xa4\\xdd$\\xa1\\xaa/?n\\xa1X\\xbcI^\\x0b6\\xebB\\x01\\x98\\xf2\\xe1-;\\x9e)\\xe2@W\\xb6\\x8f\\x1e\\xc9\\xf3x\\nL>\\x12\\xe5\\xe5\\x1c\\x126\\xcd\\x90%|}\\x14\\x86\\xe2\\xc8\\xac\\xe8\\x91\\xb9g\\x12\\xef\\x9ailV\\x07\\xe3\\x7f\\xf3D\\xe0}\\x0e\\x8e\\xb0\\xaf\\xd5\\xf9\\xbd\\xb1&\\x12\\xe1*\\x92\\xfd,h\\xb2\\xf3\\x82\\x13\\xa5P\\xc9[\\xc2\\x15\\xb5\\xda\\xeb=\\xa9\\x1f\\xa8G\\xc4\\xab\\xf7\\xed\\x9b\\xbc#\\xf8\\t\\x8dp\\xa0\\xb5\\x01@\\x0e\\xfcK`P=n^Y\\xf0\\x9c\\x8e\\xcf\\x8b\\x83c|\\\\5\\xaa\\x1d\\x90\\xf4\\xb5\\xa8X\\xfe\\xd9\\xbfE\\xbe\\tW\\x18LKa:d\\x0c\\xb9 .Qh5\\xff\\x83\\xcd\\xfaDFDm\\xd1\\xbdr\\xc1H\\xef\\x85|\\x13\\xb7L\\xe3n\\x0bX\\x88)LgZ\\xe3\\x10\\xc5\\x80m\\x96v!\\xfe\\xf7\\x91U\\xce\\xbe\\x95\\xba\\x0eD\\x93NxBx\\'\\x12\\xe7\\xc4PD\\x13\\xc8\\xde \\x8c\\x06X\\x82\\x8c?\\x0e0\\n\\xff\\xa0XD<98E\\xe4V\\x02\\x9e\\xebM\\x88a\\\\(\\xa7zG\\xf6A\\x83$*\\xe0\\xb9\\xdc\\x0c\\xb2\\x1d\\x1b\\x85\\xc1MV\\x9em\\x1a\\xa2:\\x7fI28\\xee\\xa5\\x1e\\xe23\\xb9\\x03\\n/\\x17\\x9aa\\xa13[j\\xc9\\xd5\\xf3\\xc0\\xfe\\xd5\\xc0\\x948\\xa1\\xb7\\xe8S\\xf4\\xc4\\xc5\\xe6\\x91rT\\x16\\n@\\x05\\xfc|\\x0eq\\xa3i{[\\xe9/\\xeb\\xc5\\x80\\xee\\xeba&0\\xa6^$\\x06\\xe0\\x9d\\x12\\xdbvI0\\xd3v\\xe6\\x0f\\xd0\\x1d\\x91VS\\\\\\xd4\\xec\\'\\xecx\\xad\\xaa\\x1a\\x1e\\xd3\\xfaNv\\xbb\\xf4\\xc5=\\xbc!\\xab\\x1f\\x90E\\x8cy\\x83\\xb8N\\xf7s2\\x97\\xb79\\xc4\\xa7\\x81\\xc59@\\xf3\\x02gm\\xed\\x96\\xed\\x18AV`*\\x1av+\\x85Fo\\n\\xc6P\\xe8J\\x96\\t\\xc9\\x89ZN\\xba_f\\x90\\nP\\x13x\\x1a!\\xc6\\x7f\\x98H\\xb1\\x0c$\\xe6\\x0e\\x92\\xf3fY\\xc3NA\\xf7\\xd6\\xe2L\\x01\\xc9_\\x03\\xc0\\x9d\\x9a\\xea\\xf3\\x16\\xb1}\\xa83c\\x9e\\xc7\\xc9\"~\\xb1\\x9e')"
EA L|M|N
M O:"pub_key"
M P:"PublicKey"
M Q:"PublicKey(649047446469755436164476493962254035073041614213816057338401998730370524922197937055263090312344717117843867068444841900309917092708610667902001320856938599790737762627391462194393397784994647840610069518444594490119823733471782956388202830455031724948796017238478334782251502987089602314751456321021638681886494062733979343442244283506795031435368700630571960159134090509051717849375204626853548349543941888517672667711224748175889866971968361250300511484833488480627120354092771454569152381211961865351290733664462517612125599310372315363529166209979694176272966269321267348534464910237190092323368963528974789269962324676986412938643549355203931254588888042103516289241869343542982359782871421341829338774133739828247619517656059238537559109756138558695696881092478901066624822869004861241283204035831991034668384723796384732957468696163484734104404994716764532477133452104342097472855346857870636831112496827868306381480322502714949595878631536159102771855600219237123388023160278526038681028800819475964000442602488617987970360654851394191760850702793985831503371356750578878603503986441267426900693166646664789792869135928743576976775614172484303781747874178540659521511014069392516692873175542205468521421392130208300400952409, 65537)"
EA O|P|Q
P R:F|G|H|e|377
M S:"'SHA-256'"
R R|n|S|0.215
EE l|u|0.215
SE h|l|0.221
EA m|n|o
EA p|q|r
R s|n|t|0.221
EE l|u|0.221
SE h|l|0.225
EA m|n|o
EA p|q|r
R s|n|t|0.225
EE l|u|0.225
SE h|l|0.228
EA m|n|o
EA p|q|r
R s|n|t|0.228
EE l|u|0.228
SE h|l|0.232
EA m|n|o
EA p|q|r
R s|n|t|0.232
EE l|u|0.233
SE h|l|0.236
EA m|n|o
EA p|q|r
R s|n|t|0.236
EE l|u|0.236
SE h|l|0.24
EA m|n|o
EA p|q|r
R s|n|t|0.24
EE l|u|0.24
M U:"UserSettings.get_filename"
P T:U|j|k|e|22256
SE T|l|0.24
M V:"filename"
EA V|q|r
M W:"path"
EA W|q|r
P X:U|j|k|e|22278
M Y:"'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\PySimpleGUI\\\\settings\\\\_PySimpleGUI_settings_global_.json'"
R X|n|Y|0.24
EE l|u|0.24
SE T|l|0.24
EA V|q|r
EA W|q|r
R X|n|Y|0.24
EE l|u|0.24
SE T|l|0.24
EA V|q|r
EA W|q|r
R X|n|Y|0.24
EE l|u|0.24
M 0:"UserSettings.__init__"
P Z:0|j|k|e|21987
SE Z|l|0.24
M 1:"'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\PySimpleGUI\\\\settings\\\\.psg_trial_period.json'"
EA V|n|1
EA W|q|r
M 2:"silent_on_error"
M 3:"bool"
M 4:"False"
EA 2|3|4
M 5:"autosave"
M 6:"True"
EA 5|3|6
M 7:"use_config_file"
EA 7|q|r
M 8:"convert_bools_and_none"
EA 8|3|6
EE l|u|0.24
SE T|l|0.241
EA V|q|r
EA W|q|r
R X|n|Y|0.241
EE l|u|0.241
SE T|l|0.241
EA V|q|r
EA W|q|r
R X|n|Y|0.241
EE l|u|0.241
SE Z|l|0.241
EA V|n|1
EA W|q|r
EA 2|3|4
EA 5|3|6
EA 7|q|r
EA 8|3|6
EE l|u|0.241
SE h|l|0.241
M 9:"'-upgrade info seen-'"
EA m|n|9
EA p|3|6
R s|3|6|0.241
EE l|u|0.241
SE h|l|0.241
M aa:"'-upgrade info available-'"
EA m|n|aa
EA p|3|4
R s|3|4|0.241
EE l|u|0.241
SE h|l|0.242
M ab:"'-watermark-'"
EA m|n|ab
EA p|3|4
R s|3|4|0.242
EE l|u|0.242
SE h|l|0.242
M ac:"'-watermark5-'"
EA m|n|ac
EA p|3|6
R s|3|6|0.242
EE l|u|0.242
SE h|l|0.246
EA m|n|o
EA p|q|r
R s|n|t|0.246
EE l|u|0.246
SE h|l|0.251
EA m|n|o
EA p|q|r
R s|n|t|0.251
EE l|u|0.251
SE h|l|0.254
EA m|n|o
EA p|q|r
R s|n|t|0.254
EE l|u|0.254
SE T|l|0.254
EA V|q|r
EA W|q|r
R X|n|Y|0.254
EE l|u|0.254
SE T|l|0.254
EA V|q|r
EA W|q|r
R X|n|Y|0.254
EE l|u|0.254
SE T|l|0.254
EA V|q|r
EA W|q|r
R X|n|Y|0.254
EE l|u|0.254
SE Z|l|0.254
EA V|n|1
EA W|q|r
EA 2|3|4
EA 5|3|6
EA 7|q|r
EA 8|3|6
EE l|u|0.256
SE h|l|0.256
EA m|n|ac
EA p|3|6
R s|3|6|0.256
EE l|u|0.256
SE h|l|0.256
M ad:"'-watermark text-'"
EA m|n|ad
EA p|n|t
R s|n|t|0.256
EE l|u|0.256
SE h|l|0.256
M ae:"'-watermark ver-'"
EA m|n|ae
EA p|3|6
R s|3|6|0.256
EE l|u|0.256
SE h|l|0.256
M af:"'-watermark framework ver-'"
EA m|n|af
EA p|3|6
R s|3|6|0.256
EE l|u|0.256
SE h|l|0.256
M ag:"'-watermark font-'"
EA m|n|ag
M ah:"'_ 9 bold'"
EA p|n|ah
R s|n|ah|0.256
EE l|u|0.256
SE v|l|0.256
EA z|A|B
EA C|A|D
EE l|u|0.256
SE E|l|0.273
EA I|J|K
EA L|M|N
EA O|P|Q
R R|n|S|0.275
EE l|u|0.276
SE h|l|0.293
EA m|n|o
EA p|q|r
R s|n|t|0.293
EE l|u|0.293
SE h|l|0.304
EA m|n|o
EA p|q|r
R s|n|t|0.304
EE l|u|0.304
SE h|l|0.318
EA m|n|o
EA p|q|r
R s|n|t|0.319
EE l|u|0.319
SE h|l|0.329
EA m|n|o
EA p|q|r
R s|n|t|0.33
EE l|u|0.33
SE h|l|0.339
EA m|n|o
EA p|q|r
R s|n|t|0.34
EE l|u|0.34
SE T|l|0.34
EA V|q|r
EA W|q|r
R X|n|Y|0.34
EE l|u|0.34
SE T|l|0.34
EA V|q|r
EA W|q|r
R X|n|Y|0.34
EE l|u|0.34
SE T|l|0.34
EA V|q|r
EA W|q|r
R X|n|Y|0.34
EE l|u|0.34
SE Z|l|0.34
EA V|n|1
EA W|q|r
EA 2|3|4
EA 5|3|6
EA 7|q|r
EA 8|3|6
EE l|u|0.34
SE T|l|0.341
EA V|q|r
EA W|q|r
R X|n|Y|0.341
EE l|u|0.341
SE T|l|0.341
EA V|q|r
EA W|q|r
R X|n|Y|0.341
EE l|u|0.341
SE Z|l|0.341
EA V|n|1
EA W|q|r
EA 2|3|4
EA 5|3|6
EA 7|q|r
EA 8|3|6
EE l|u|0.341
SE h|l|0.345
EA m|n|o
EA p|q|r
R s|n|t|0.345
EE l|u|0.345
SE h|l|0.349
EA m|n|o
EA p|q|r
R s|n|t|0.349
EE l|u|0.349
SE h|l|0.353
EA m|n|o
EA p|q|r
R s|n|t|0.353
EE l|u|0.353
SE T|l|0.353
EA V|q|r
EA W|q|r
R X|n|Y|0.353
EE l|u|0.353
SE T|l|0.353
EA V|q|r
EA W|q|r
R X|n|Y|0.353
EE l|u|0.353
SE T|l|0.353
EA V|q|r
EA W|q|r
R X|n|Y|0.354
EE l|u|0.354
SE Z|l|0.354
EA V|n|1
EA W|q|r
EA 2|3|4
EA 5|3|6
EA 7|q|r
EA 8|3|6
EE l|u|0.354
ET u|e|0.354
M aj:"inputs"
M ak:"solveEquation"
M al:"c:\\Users\\THIAGO PEREIRA\\OneDrive\\Documentos\\\u00c1rea de Trabalho\\Faculdade\\M\u00e9todos Num\u00e9ricos - 4P\\Exerc\u00edcios\\-find_0_by_iteration\\task\\solveEquation.py"
M am:null
P ai:aj|ak|al|am|81
ST ai|0.354
M an:"=============================== "
C f|an|0.354
M ao:"Running: "
C f|ao|0.354
M ap:"task_name"
C ap|aj|0.355
M aq:" ================================\n"
C f|aq|0.355
SE ai|l|0.356
M ar:"stdout"
M as:"Para usar fun\u00e7\u00f5es matem\u00e1ticas no Python, siga estas regras:\n- Soma: +\n- Subtra\u00e7\u00e3o: -\n- Multiplica\u00e7\u00e3o: *\n- Divis\u00e3o: /\n- Exponencia\u00e7\u00e3o: **\n- Exponencia\u00e7\u00e3o com expoente 3: x**3\n- Raiz quadrada: sqrt() ou x**(1/2)\n- Raiz c\u00fabica: x**(1/3)\n- Seno: sin()\n- Cosseno: cos()- Tangente: tan()\n- Logaritmo natural: log()\n- Logaritmo base 10: log10()\n- Valor absoluto: abs()\n"
C ar|as|0.357
M at:"\n"
C ar|at|0.358
P au:aj|ak|al|e|83
M av:"function_str"
M aw:"'x**3-9*x+3'"
AS au|av|n|aw|4.598
P ax:aj|ak|al|e|84
M ay:"a"
M az:"float"
M aA:"0.0"
AS ax|ay|az|aA|6.167
P aB:aj|ak|al|e|85
M aC:"b"
M aD:"1.0"
AS aB|aC|az|aD|6.975
P aE:aj|ak|al|e|86
M aF:"'10**-3'"
AS aE|C|n|aF|9.759
P aG:aj|ak|al|e|88
M aH:"start_time"
M aI:"1728665619.0004337"
AS aG|aH|az|aI|9.759
M aK:"iteraction"
P aJ:aK|ak|al|e|27
SE aJ|l|9.76
EA av|n|aw
EA ay|az|aA
EA aC|az|aD
EA C|n|aF
P aL:aK|ak|al|e|28
M aM:"expected_error"
M aN:"0.001"
AS aL|aM|az|aN|9.76
P aO:aK|ak|al|e|29
M aP:"xi"
M aQ:"0"
AS aO|aP|A|aQ|9.76
P aR:aK|ak|al|e|30
M aS:"total_iteraction"
AS aR|aS|A|aQ|9.76
P aT:aK|ak|al|e|31
M aU:"data"
M aV:"list"
M aW:"[]"
AS aT|aU|aV|aW|9.76
P aX:aK|ak|al|e|32
M aY:"csv_filename"
M aZ:"'csv_iteraction_1728665619.csv'"
AS aX|aY|n|aZ|9.76
M a1:"while True"
P a0:a1|ak|al|e|34
M a2:"WHILE"
SE a0|a2|9.76
M a4:"Step: while True"
P a3:a4|ak|al|e|34
M a5:"WHILE_STEP"
SE a3|a5|9.76
M a7:"calculate_function"
P a6:a7|ak|al|e|13
SE a6|l|9.76
EA av|n|aw
M a8:"x"
EA a8|az|aA
P a9:a7|ak|al|e|15
M ba:"result"
M bb:"3.0"
AS a9|ba|az|bb|9.76
P bc:a7|ak|al|e|18
R bc|az|bb|9.76
EE l|u|9.76
P bd:aK|ak|al|e|35
M be:"fa"
AS bd|be|az|bb|9.76
SE a6|l|9.76
EA av|n|aw
EA a8|az|aD
M bf:"-5.0"
AS a9|ba|az|bf|9.76
R bc|az|bf|9.76
EE l|u|9.76
P bg:aK|ak|al|e|36
M bh:"fb"
AS bg|bh|az|bf|9.76
P bi:aK|ak|al|e|50
M bj:"0.5"
AS bi|aP|az|bj|9.76
SE a6|l|9.76
EA av|n|aw
EA a8|az|bj
M bk:"-1.375"
AS a9|ba|az|bk|9.76
R bc|az|bk|9.76
EE l|u|9.761
P bl:aK|ak|al|e|51
M bm:"fxi"
AS bl|bm|az|bk|9.761
M bo:"if fa * fxi < 0"
P bn:bo|ak|al|e|62
M bp:"IF_SCOPE"
SE bn|bp|9.761
EA be|az|bb
EA bm|az|bk
P bq:aK|ak|al|e|63
AS bq|aC|az|bj|9.761
EE bp|u|9.761
EE a5|u|9.761
SE a3|a5|9.761
SE a6|l|9.761
EA av|n|aw
EA a8|az|aA
AS a9|ba|az|bb|9.761
R bc|az|bb|9.761
EE l|u|9.761
AS bd|be|az|bb|9.761
SE a6|l|9.761
EA av|n|aw
EA a8|az|bj
AS a9|ba|az|bk|9.761
R bc|az|bk|9.761
EE l|u|9.761
AS bg|bh|az|bk|9.761
M br:"0.25"
AS bi|aP|az|br|9.761
SE a6|l|9.761
EA av|n|aw
EA a8|az|br
M bs:"0.765625"
AS a9|ba|az|bs|9.761
R bc|az|bs|9.761
EE l|u|9.761
AS bl|bm|az|bs|9.761
M bu:"else (to if fa * fxi < 0)"
P bt:bu|ak|al|e|62
M bv:"ELSE_SCOPE"
SE bt|bv|9.761
EA be|az|bb
EA bm|az|bs
P bw:aK|ak|al|e|65
AS bw|ay|az|br|9.761
EE bv|u|9.761
EE a5|u|9.761
SE a3|a5|9.761
SE a6|l|9.761
EA av|n|aw
EA a8|az|br
AS a9|ba|az|bs|9.761
R bc|az|bs|9.761
EE l|u|9.761
AS bd|be|az|bs|9.761
SE a6|l|9.761
EA av|n|aw
EA a8|az|bj
AS a9|ba|az|bk|9.762
R bc|az|bk|9.762
EE l|u|9.762
AS bg|bh|az|bk|9.762
M bx:"0.375"
AS bi|aP|az|bx|9.762
SE a6|l|9.762
EA av|n|aw
EA a8|az|bx
M by:"-0.322265625"
AS a9|ba|az|by|9.762
R bc|az|by|9.762
EE l|u|9.762
AS bl|bm|az|by|9.762
SE bn|bp|9.762
EA be|az|bs
EA bm|az|by
AS bq|aC|az|bx|9.762
EE bp|u|9.762
EE a5|u|9.762
SE a3|a5|9.762
SE a6|l|9.762
EA av|n|aw
EA a8|az|br
AS a9|ba|az|bs|9.762
R bc|az|bs|9.762
EE l|u|9.762
AS bd|be|az|bs|9.762
SE a6|l|9.762
EA av|n|aw
EA a8|az|bx
AS a9|ba|az|by|9.762
R bc|az|by|9.762
EE l|u|9.762
AS bg|bh|az|by|9.762
M bz:"0.3125"
AS bi|aP|az|bz|9.762
SE a6|l|9.762
EA av|n|aw
EA a8|az|bz
M bA:"0.218017578125"
AS a9|ba|az|bA|9.762
R bc|az|bA|9.762
EE l|u|9.762
AS bl|bm|az|bA|9.762
SE bt|bv|9.762
EA be|az|bs
EA bm|az|bA
AS bw|ay|az|bz|9.762
EE bv|u|9.762
EE a5|u|9.762
SE a3|a5|9.762
SE a6|l|9.762
EA av|n|aw
EA a8|az|bz
AS a9|ba|az|bA|9.763
R bc|az|bA|9.763
EE l|u|9.763
AS bd|be|az|bA|9.763
SE a6|l|9.763
EA av|n|aw
EA a8|az|bx
AS a9|ba|az|by|9.763
R bc|az|by|9.763
EE l|u|9.763
AS bg|bh|az|by|9.763
M bB:"0.34375"
AS bi|aP|az|bB|9.763
SE a6|l|9.763
EA av|n|aw
EA a8|az|bB
M bC:"-0.053131103515625"
AS a9|ba|az|bC|9.763
R bc|az|bC|9.763
EE l|u|9.763
AS bl|bm|az|bC|9.763
SE bn|bp|9.763
EA be|az|bA
EA bm|az|bC
AS bq|aC|az|bB|9.763
EE bp|u|9.763
EE a5|u|9.763
SE a3|a5|9.763
SE a6|l|9.763
EA av|n|aw
EA a8|az|bz
AS a9|ba|az|bA|9.763
R bc|az|bA|9.763
EE l|u|9.763
AS bd|be|az|bA|9.763
SE a6|l|9.763
EA av|n|aw
EA a8|az|bB
AS a9|ba|az|bC|9.763
R bc|az|bC|9.763
EE l|u|9.763
AS bg|bh|az|bC|9.763
M bD:"0.328125"
AS bi|aP|az|bD|9.763
SE a6|l|9.763
EA av|n|aw
EA a8|az|bD
M bE:"0.08220291137695312"
AS a9|ba|az|bE|9.763
R bc|az|bE|9.763
EE l|u|9.763
AS bl|bm|az|bE|9.763
SE bt|bv|9.764
EA be|az|bA
EA bm|az|bE
AS bw|ay|az|bD|9.764
EE bv|u|9.764
EE a5|u|9.764
SE a3|a5|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bD
AS a9|ba|az|bE|9.764
R bc|az|bE|9.764
EE l|u|9.764
AS bd|be|az|bE|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bB
AS a9|ba|az|bC|9.764
R bc|az|bC|9.764
EE l|u|9.764
AS bg|bh|az|bC|9.764
M bF:"0.3359375"
AS bi|aP|az|bF|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bF
M bG:"0.01447439193725586"
AS a9|ba|az|bG|9.764
R bc|az|bG|9.764
EE l|u|9.764
AS bl|bm|az|bG|9.764
SE bt|bv|9.764
EA be|az|bE
EA bm|az|bG
AS bw|ay|az|bF|9.764
EE bv|u|9.764
EE a5|u|9.764
SE a3|a5|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bF
AS a9|ba|az|bG|9.764
R bc|az|bG|9.764
EE l|u|9.764
AS bd|be|az|bG|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bB
AS a9|ba|az|bC|9.764
R bc|az|bC|9.764
EE l|u|9.764
AS bg|bh|az|bC|9.764
M bH:"0.33984375"
AS bi|aP|az|bH|9.764
SE a6|l|9.764
EA av|n|aw
EA a8|az|bH
M bI:"-0.019343912601470947"
AS a9|ba|az|bI|9.765
R bc|az|bI|9.765
EE l|u|9.765
AS bl|bm|az|bI|9.765
SE bn|bp|9.765
EA be|az|bG
EA bm|az|bI
AS bq|aC|az|bH|9.765
EE bp|u|9.765
EE a5|u|9.765
SE a3|a5|9.765
SE a6|l|9.765
EA av|n|aw
EA a8|az|bF
AS a9|ba|az|bG|9.765
R bc|az|bG|9.765
EE l|u|9.765
AS bd|be|az|bG|9.765
SE a6|l|9.765
EA av|n|aw
EA a8|az|bH
AS a9|ba|az|bI|9.765
R bc|az|bI|9.765
EE l|u|9.765
AS bg|bh|az|bI|9.765
M bJ:"0.337890625"
AS bi|aP|az|bJ|9.765
SE a6|l|9.765
EA av|n|aw
EA a8|az|bJ
M bK:"-0.0024386271834373474"
AS a9|ba|az|bK|9.765
R bc|az|bK|9.765
EE l|u|9.765
AS bl|bm|az|bK|9.765
SE bn|bp|9.765
EA be|az|bG
EA bm|az|bK
AS bq|aC|az|bJ|9.765
EE bp|u|9.765
EE a5|u|9.765
SE a3|a5|9.765
SE a6|l|9.765
EA av|n|aw
EA a8|az|bF
AS a9|ba|az|bG|9.765
R bc|az|bG|9.765
EE l|u|9.765
AS bd|be|az|bG|9.765
SE a6|l|9.765
EA av|n|aw
EA a8|az|bJ
AS a9|ba|az|bK|9.765
R bc|az|bK|9.765
EE l|u|9.765
AS bg|bh|az|bK|9.765
M bL:"0.3369140625"
AS bi|aP|az|bL|9.766
SE a6|l|9.766
EA av|n|aw
EA a8|az|bL
M bM:"0.006016918458044529"
AS a9|ba|az|bM|9.766
R bc|az|bM|9.766
EE l|u|9.766
AS bl|bm|az|bM|9.766
SE bt|bv|9.766
EA be|az|bG
EA bm|az|bM
AS bw|ay|az|bL|9.766
EE bv|u|9.766
M bO:"if expected_error > abs(b - a)"
P bN:bO|ak|al|e|67
SE bN|bp|9.766
EA aM|az|aN
P bP:aK|ak|al|e|68
M bQ:"BREAK"
SE bP|bQ|9.766
EE bp|u|9.766
EE a5|u|9.766
EE a2|u|9.766
P bR:aK|ak|al|e|71
M bS:"writer"
M bT:"<_csv.writer object at 0x000001FB41A91BA0>"
AS bR|bS|bS|bT|9.766
M bV:"IncrementalEncoder.encode"
M bW:"encodings.cp1252"
M bX:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\encodings\\cp1252.py"
P bU:bV|bW|bX|e|18
SE bU|l|9.766
M bY:"input"
M bZ:"'Iteraction;a;b;xi\\r\\n'"
EA bY|n|bZ
M b0:"final"
EA b0|3|4
P b1:bV|bW|bX|e|19
M b2:"b'Iteraction;a;b;xi\\r\\n'"
R b1|J|b2|9.767
EE l|u|9.767
SE bU|l|9.767
M b3:"'1;0.0;1.0;0.5\\r\\n'"
EA bY|n|b3
EA b0|3|4
M b4:"b'1;0.0;1.0;0.5\\r\\n'"
R b1|J|b4|9.767
EE l|u|9.767
SE bU|l|9.767
M b5:"'2;0.0;0.5;0.25\\r\\n'"
EA bY|n|b5
EA b0|3|4
M b6:"b'2;0.0;0.5;0.25\\r\\n'"
R b1|J|b6|9.767
EE l|u|9.767
SE bU|l|9.767
M b7:"'3;0.25;0.5;0.375\\r\\n'"
EA bY|n|b7
EA b0|3|4
M b8:"b'3;0.25;0.5;0.375\\r\\n'"
R b1|J|b8|9.767
EE l|u|9.767
SE bU|l|9.767
M b9:"'4;0.25;0.375;0.3125\\r\\n'"
EA bY|n|b9
EA b0|3|4
M ca:"b'4;0.25;0.375;0.3125\\r\\n'"
R b1|J|ca|9.767
EE l|u|9.767
SE bU|l|9.767
M cb:"'5;0.3125;0.375;0.34375\\r\\n'"
EA bY|n|cb
EA b0|3|4
M cc:"b'5;0.3125;0.375;0.34375\\r\\n'"
R b1|J|cc|9.767
EE l|u|9.767
SE bU|l|9.767
M cd:"'6;0.3125;0.34375;0.328125\\r\\n'"
EA bY|n|cd
EA b0|3|4
M ce:"b'6;0.3125;0.34375;0.328125\\r\\n'"
R b1|J|ce|9.767
EE l|u|9.767
SE bU|l|9.767
M cf:"'7;0.328125;0.34375;0.3359375\\r\\n'"
EA bY|n|cf
EA b0|3|4
M cg:"b'7;0.328125;0.34375;0.3359375\\r\\n'"
R b1|J|cg|9.767
EE l|u|9.767
SE bU|l|9.767
M ch:"'8;0.3359375;0.34375;0.33984375\\r\\n'"
EA bY|n|ch
EA b0|3|4
M ci:"b'8;0.3359375;0.34375;0.33984375\\r\\n'"
R b1|J|ci|9.767
EE l|u|9.767
SE bU|l|9.767
M cj:"'9;0.3359375;0.33984375;0.337890625\\r\\n'"
EA bY|n|cj
EA b0|3|4
M ck:"b'9;0.3359375;0.33984375;0.337890625\\r\\n'"
R b1|J|ck|9.767
EE l|u|9.767
SE bU|l|9.767
M cl:"'10;0.3359375;0.337890625;0.3369140625\\r\\n'"
EA bY|n|cl
EA b0|3|4
M cm:"b'10;0.3359375;0.337890625;0.3369140625\\r\\n'"
R b1|J|cm|9.767
EE l|u|9.767
EE l|u|9.768
P cn:aj|ak|al|e|90
M co:"end_time"
M cp:"1728665619.0100038"
AS cn|co|az|cp|9.768
P cq:aj|ak|al|e|91
M cr:"execution_time"
M cs:"9.570121765136719"
AS cq|cr|az|cs|9.768
M ct:"\nTempo de execu\u00e7\u00e3o: 9.57 ms"
C ar|ct|9.768
C ar|at|9.769
EE l|u|9.769
C ap|aj|9.769
M cu:" status: "
C f|cu|9.77
M cv:"PASS\n"
C f|cv|9.77
M cw:"================================================================================\n"
C f|cw|9.77
ET u|e|9.771
M cy:"Teardown tasks"
M cz:"teardown"
P cx:cy|cz|e|e|0
ST cx|9.771
M cA:"Process snapshot"
SPS cA|9.771
M cB:"System information:\nMemory: Total: 9.8 G, Available: 528.4 M, Used: 94.8 %\nCPUs: 16"
P cC:e|e|e|e|0
L I|cB|cC|0|9.804
M cD:"Current Process: python.exe (pid: 10316, status: running)\nCommand Line: C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\python.exe -m robocorp.tasks run c:\\Users\\THIAGO PEREIRA\\OneDrive\\Documentos\\\u00c1rea de Trabalho\\Faculdade\\M\u00e9todos Num\u00e9ricos - 4P\\Exerc\u00edcios\\-find_0_by_iteration\\task\\solveEquation.py -t inputs\nStarted: 13:53:28\nParent pid: 20752\nResident Set Size: 43.6 M\nVirtual Memory Size: 30.4 M"
L I|cD|cC|0|9.823
M cE:"MainThread|Thread ID: 21788 (non daemon)"
STD cE|9.823
M cF:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\robocorp\\log\\__init__.py"
M cG:"process_snapshot"
M cH:"robo_logger.process_snapshot()"
TBE cF|270|cG|cH
M cI:"logger_instances"
M cJ:"dict"
M cK:"{<robocorp.log._robo_logger._RoboLogger object at 0x000001FB401813D0>: 1}"
TBV cI|cJ|cK
M cL:"robo_logger"
M cM:"_RoboLogger"
M cN:"<robocorp.log._robo_logger._RoboLogger object at 0x000001FB401813D0>"
TBV cL|cM|cN
M cO:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\robocorp\\log\\_robo_logger.py"
M cP:"new_func"
M cQ:"return func(self, *args, **kwargs)"
TBE cO|20|cP|cQ
M cR:"self"
TBV cR|cM|cN
M cS:"args"
M cT:"tuple"
M cU:"()"
TBV cS|cT|cU
M cV:"kwargs"
M cW:"{}"
TBV cV|cJ|cW
M cX:"func"
M cY:"function"
M cZ:"<function _RoboLogger.process_snapshot at 0x000001FB40187D80>"
TBV cX|cY|cZ
M c0:"return self._robot_output_impl.process_snapshot(hide_vars)"
TBE cO|416|cG|c0
TBV cR|cM|cN
M c1:"hide_vars"
TBV c1|3|4
M c2:"C:\\Users\\THIAGO PEREIRA\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\robocorp\\log\\_robo_output_impl.py"
M c3:"self._dump_threads(hide_vars)"
TBE c2|748|cG|c3
M c4:"_RoboOutputImpl"
M c5:"<robocorp.log._robo_output_impl._RoboOutputImpl object at 0x000001FB40163CB0>"
TBV cR|c4|c5
TBV c1|3|4
M c6:"log"
M c7:"module"
M c8:"<module 'robocorp.log' from 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\__init__.py'>"
TBV c6|c7|c8
M c9:"entry_id"
M da:"'ps_0'"
TBV c9|n|da
M db:"entry_type"
M dc:"'process_snapshot'"
TBV db|n|dc
M dd:"psutil"
M de:"<module 'psutil' from 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\psutil\\\\__init__.py'>"
TBV dd|c7|de
M df:"AccessDenied"
M dg:"type"
M dh:"<class 'psutil.AccessDenied'>"
TBV df|dg|dh
M di:"NoSuchProcess"
M dj:"<class 'psutil.NoSuchProcess'>"
TBV di|dg|dj
M dk:"ZombieProcess"
M dl:"<class 'psutil.ZombieProcess'>"
TBV dk|dg|dl
M dm:"curr_process"
M dn:"Process"
M do:"psutil.Process(pid=10316, name='python.exe', status='running', started='13:53:28')"
TBV dm|dn|do
M dp:"log_info"
M dq:"<function _RoboOutputImpl.process_snapshot.<locals>.log_info at 0x000001FB429D5F80>"
TBV dp|cY|dq
M dr:"memory_info"
M ds:"'Total: 9.8 G, Available: 528.4 M, Used: 94.8 %'"
TBV dr|n|ds
M dt:"child_i"
TBV dt|A|aQ
M du:"child"
TBV du|dn|do
M dv:"name"
M dw:"'python.exe'"
TBV dv|n|dw
M dx:"status"
M dy:"'running'"
TBV dx|n|dy
M dz:"create_time"
M dA:"'13:53:28'"
TBV dz|n|dA
M dB:"ppid"
M dC:"'20752'"
TBV dB|n|dC
M dD:"cmdline"
M dE:"'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe -m robocorp.tasks run c:\\\\Users\\\\THIAGO PEREIRA\\\\OneDrive\\\\Documentos\\\\\u00c1rea de Trabalho\\\\Faculdade\\\\M\u00e9todos Num\u00e9ricos - 4P\\\\Exerc\u00edcios\\\\-find_0_by_iteration\\\\task\\\\solveEquation.py -t inputs'"
TBV dD|n|dE
M dF:"rss"
M dG:"'43.6 M'"
TBV dF|n|dG
M dH:"vms"
M dI:"'30.4 M'"
TBV dH|n|dI
M dJ:"proc_memory_info"
M dK:"pmem"
M dL:"pmem(rss=45682688, vms=31870976, num_page_faults=19263, peak_wset=55197696, wset=45682688, peak_paged_pool=196912, paged_pool=195920, peak_nonpaged_pool=22216, nonpaged_pool=21584, pagefile=31870976, peak_pagefile=44503040, private=31870976)"
TBV dJ|dK|dL
M dM:"'Current Process: python.exe (pid: 10316, status: running)\\nCommand Line: C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\python.exe -m robocorp.tasks run c:\\\\Users\\\\THIAGO PEREIRA\\\\OneDrive\\\\Documentos\\\\\u00c1rea de Trabalho\\\\Faculdade\\\\M\u00e9todos Num\u00e9ricos - 4P\\\\Exerc\u00edcios\\\\-find_0_by_iteration\\\\task\\\\solveEquation.py -t inputs\\nStarted: 13:53:28\\nParent pid: 20752\\nResident Set Size: 43.6 M\\nVirtual Memory Size: 30.4 M'"
TBV I|n|dM
M dN:"_dump_threads"
M dO:"stack.append((f, f.f_lineno))"
TBE c2|769|dN|dO
TBV cR|c4|c5
TBV c1|3|4
M dP:"thread_id"
M dQ:"21788"
TBV dP|A|dQ
M dR:"frame"
M dS:"<frame at 0x000001FB41A528A0, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\_robo_output_impl.py', line 773, code _dump_threads>"
TBV dR|dR|dS
M dT:"thread"
M dU:"_MainThread"
M dV:"<_MainThread(MainThread, started 21788)>"
TBV dT|dU|dV
M dW:"title"
M dX:"'MainThread|Thread ID: 21788 (non daemon)'"
TBV dW|n|dX
M dY:"f"
M dZ:"<frame at 0x000001FB41D3EE80, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\tasks\\\\_commands.py', line 494, code run>"
TBV dY|dR|dZ
M d0:"stack"
M d1:"[(<frame at 0x000001FB41985630, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\__init__.py', line 270, code process_snapshot>, 270), (<frame at 0x000001FB41B14120, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\_robo_logger.py', line 20, code new_func>, 20), (<frame at 0x000001FB4010E2C0, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\_robo_logger.py', line 416, code process_snapshot>, 416), (<frame at 0x000001FB419ECD60, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\_robo_output_impl.py', line 748, code process_snapshot>, 748), (<frame at 0x000001FB41A528A0, file 'C:\\\\Users\\\\THIAGO PEREIRA\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python312\\\\Lib\\\\site-packages\\\\robocorp\\\\log\\\\_robo_output_impl.py', line 773, code _dump_threads>, 769)]"
TBV d0|aV|d1
ETD 9.837
EPS 9.837
ET u|e|9.837
ER u|9.837
